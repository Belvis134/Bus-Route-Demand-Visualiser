[{"name":"app.R","content":"suppressPackageStartupMessages(library(shiny))\r\nsuppressPackageStartupMessages(library(rjson))\r\nsuppressPackageStartupMessages(library(ComplexHeatmap))\r\nsuppressPackageStartupMessages(library(circlize))\r\nsuppressPackageStartupMessages(library(htmltools))\r\nsuppressPackageStartupMessages(library(dplyr))\r\nsuppressPackageStartupMessages(library(tidyr))\r\nsuppressPackageStartupMessages(library(shinythemes))\r\nsuppressPackageStartupMessages(library(stringr))\r\nsuppressPackageStartupMessages(library(shinyWidgets))\r\nprint(\"VVV All error messages from the app are below this line VVV\")\r\n\r\n# Determine the month ranges available.\r\ncurrent_date <- str_split(Sys.Date(),\"-\")\r\ncurrent_year <- as.numeric(current_date[[1]][[1]])\r\ncurrent_month <- as.numeric(current_date[[1]][[2]])\r\ncurrent_day <- as.numeric(current_date[[1]][[3]])\r\nif (current_day >= 10) {\r\n  if (current_month == 1) {\r\n    min_month <- paste0(current_year-1,\"-\",10)\r\n    max_month <- paste0(current_year-1,\"-\",12)\r\n  } else if (current_month == 2 | current_month == 3) {\r\n    min_month <- paste0(current_year-1,\"-\",9+current_month)\r\n    max_month <- paste0(current_year,\"-\",current_month-1)\r\n  } else {\r\n    min_month <- paste0(current_year,\"-\",current_month-3)\r\n    max_month <- paste0(current_year,\"-\",current_month-1)\r\n  }\r\n} else {\r\n  if (current_month == 1 | current_month == 2) {\r\n    min_month <- paste0(current_year-1,\"-\",8+current_month)\r\n    max_month <- paste0(current_year-1,\"-\",10+current_month)\r\n  } else if (current_month == 3 | current_month == 4) {\r\n    min_month <- paste0(current_year-1,\"-\",8+current_month)\r\n    max_month <- paste0(current_year,\"-\",current_month-2)\r\n  } else {\r\n    min_month <- paste0(current_year,\"-\",current_month-4)\r\n    max_month <- paste0(current_year,\"-\",current_month-2)\r\n  }\r\n}\r\nrepo_min_month <- \"2025-03\"\r\nif (current_day >= 2) {\r\n  busrouter_max_month <- paste0(current_year,\"-\",current_month)\r\n} else {\r\n  busrouter_max_month <- paste0(current_year,\"-\",current_month-1)\r\n}\r\n\r\nui <- fluidPage(\r\n  \r\n  tags$head(\r\n    tags$style(HTML(\"\r\n      body {\r\n        background-color: #3F3F3F;\r\n      }\r\n      .import_shift {\r\n        margin-top: 25px;\r\n      }\r\n      .red_text {\r\n        color: #BB0000;\r\n      }\r\n      .green_text {\r\n        color: #00DD00;\r\n      }\r\n      .blue_text {\r\n        color: #2050C0;\r\n      }\r\n      input[type='checkbox'],\r\n      input[type='radio'] {\r\n        accent-color: #007BFF;\r\n      }\r\n      \")),\r\n    tags$script(src = \"../www/data_importing.js\"),\r\n    tags$script(src = \"../www/discord_data_transfer.js\")\r\n  ),\r\n  \r\n  titlePanel(tags$p(style = \"color: white; text-align: center\", \"Bus Route Demand Visualiser 1.3.0\")),\r\n  sidebarLayout(\r\n    sidebarPanel(\r\n      width = 5,\r\n      style = \"background-color: #7F7F7F;\",\r\n      tags$div(tags$h5(strong(tags$i(icon(\"file-import\")), \"Select how you want to import data.\"))),\r\n      radioButtons(\"import_select\",\"Import data from\", choices = c(\"Datamall import\" = \"datamall_import\", \"Get from repository\" = \"repository_import\", \"File upload\" = \"file_upload\"), inline = T),\r\n      conditionalPanel(\r\n        condition = \"input.import_select == 'datamall_import'\",\r\n        tags$div(tags$h5(strong(tags$i(icon(\"triangle-exclamation\")), \"If the default account key is rate limited, use your own.\", class = \"red_text\"))),\r\n        checkboxInput(\"use_own_key\", \"Use your own account key\", F),\r\n        conditionalPanel(\r\n          condition = \"input.use_own_key == true\",\r\n          textInput(\"own_key\", HTML(paste(icon(\"key\"), \"Your account key\")),value = NA, width = \"500px\")\r\n        ),\r\n        tags$div(tags$h5(strong(tags$i(icon(\"triangle-exclamation\")), \"Please wait until you receive 'File import successful!'.\", class = \"red_text\"))),\r\n        fluidRow(\r\n          splitLayout(\r\n            paste(\" \"),\r\n            airDatepickerInput(\"datamall_date\", HTML(paste(icon(\"calendar\"), \"Select Date\")), value = NULL, minDate = min_month, maxDate = max_month, dateFormat = \"yyyy-MM\", view = \"months\", minView = \"months\", width = \"100px\", addon = \"none\", readonly = TRUE, autoClose = TRUE),\r\n            div(class = \"import_shift\", actionButton(\"import_datamall\", \"Import from Datamall\", width = \"180px\", icon = icon(\"file-import\"))),\r\n            cellWidths = c(\"10px\",\"100px\",\"180px\")\r\n          )\r\n        )\r\n      ),\r\n      conditionalPanel(\r\n        condition = \"input.import_select == 'repository_import'\",\r\n        tags$div(tags$h5(strong(tags$i(icon(\"triangle-exclamation\")), \"Please wait until you receive 'File import from Datamall successful!'.\", class = \"red_text\"))),\r\n        tags$div(tags$h5(strong(\"Datamall data | BusRouter data\", class = \"blue_text\"))),\r\n        fluidRow(\r\n          splitLayout(\r\n            paste(\" \"),\r\n            airDatepickerInput(\"od_matrix_date\", HTML(paste(icon(\"calendar\"), \"Select Date\")), value = NULL, minDate = repo_min_month, maxDate = max_month, dateFormat = \"yyyy-MM\", view = \"months\", minView = \"months\", width = \"100px\", addon = \"none\", readonly = TRUE, autoClose = TRUE),\r\n            airDatepickerInput(\"busrouter_date\", HTML(paste(icon(\"calendar\"), \"Select Date\")), value = NULL, minDate = repo_min_month, maxDate = busrouter_max_month, dateFormat = \"yyyy-MM\", view = \"months\", minView = \"months\", width = \"100px\", addon = \"none\", readonly = TRUE, autoClose = TRUE),\r\n            div(class = \"import_shift\", actionButton(\"import_repository\", \"Import from repository\", icon = icon(\"file-import\"), width = \"180px\")),\r\n            cellWidths = c(\"10px\",\"100px\",\"100px\",\"180px\")\r\n          )\r\n        )\r\n      ),\r\n      conditionalPanel(\r\n        condition = \"input.import_select == 'file_upload'\",\r\n        tags$div(tags$h5(strong(tags$i(icon(\"triangle-exclamation\")), \"Please wait until you receive 'File upload from local storage successful!'.\", class = \"red_text\"))),\r\n        fileInput(\"data1_in\", \"Choose LTA Origin-Destination CSV\", width = \"500px\",\r\n                  accept = c(\".csv\", \".docx\", \".doc\"),\r\n        )),\r\n      htmlOutput(\"upload_conf\"),\r\n      htmlOutput(\"upload_conf2\"),\r\n      tags$div(tags$h5(strong(tags$i(icon(\"table\")), \"Select what type of data to view.\"))),\r\n      checkboxInput(\"seespecstops\", \"See specific bus stops\", F),\r\n      conditionalPanel(\r\n        condition = \"input.seespecstops == false\",\r\n        textInput(\"svc_in\", HTML(paste(icon(\"bus\"), \"Which bus service would you like to see?\")), width = \"500px\"),\r\n        radioButtons(\"svc_half_in\", HTML(paste(icon(\"scissors\"), \"Do you want to split route in half?\")), width = \"500px\", choices = c(\"Full\", \"1st half\", \"2nd half\"), inline = T),\r\n        radioButtons(\"dir_in\", HTML(paste(icon(\"right-left\"), \"Which direction? For loop\", icon(\"rotate\"), \", put as 1.\")), width = \"500px\", choices = c(1,2), inline = T)\r\n      ),\r\n      conditionalPanel(\r\n        condition = \"input.seespecstops == true\",\r\n        tags$div(tags$h5(strong(tags$i(icon(\"triangle-exclamation\")), \"The bus stops you listed in the origin box must be paired with a corresponding bus stop in order in the destination box.\", class = \"red_text\"))),\r\n        tags$div(tags$h5(strong(tags$i(icon(\"circle-info\")), \"For example, if you put 10009,10011 as origin, 10017,10018 as destination, 10009 pairs with 10017, 10011 pairs with 10018.\", class = \"blue_text\"))),\r\n        textInput(\"ori_stops\", \"Which specific origin stops? Put a comma between bus stops.\", width = \"500px\", value = \"null\"),\r\n        textInput(\"dst_stops\", \"Which specific destination stops? Put a comma between bus stops.\", width = \"500px\")\r\n      ),\r\n      tags$div(tags$h4(strong(\"Please select your filters. Filters available include time and day type filters.\"))),\r\n      radioButtons(\"day_filter\", HTML(paste(icon(\"calendar\"), \"Select Day Type filter\")), choices = c(\"Combined\" = \"combined\",\"Weekday\" = \"weekday\",\"Weekend/PH\" = \"weekend_ph\"), selected = c(\"combined\"), inline = T),\r\n      tags$div(tags$h5(strong(tags$i(icon(\"clock\")), \"Select Time Period filter\"))),\r\n      checkboxInput(\"time_filter\",\"Filter by Time Period\", F),\r\n      conditionalPanel(\r\n        condition = \"input.time_filter == true\",\r\n        tags$div(tags$h5(strong(tags$i(icon(\"triangle-exclamation\")), \"For time filters, give in 24h format. For continuation to next day, let time since be greater than time until. Both equal are treated as full (Why would you do that?).\", class = \"red_text\"))),\r\n        radioButtons(\"more_time_filters\", \"Include how many time periods?\", choices = c(\"1\" = \"1\", \"2\" = \"2\", \"3\" = \"3\", \"4\" = \"4\"), selected = c(\"1\"), inline = T),\r\n        tags$div(tags$h5(strong(\"Select Time Period filter 1\", class = \"blue_text\"))),\r\n        sliderInput(\"time_since1\",\"TP1: Since what hour?\", 0, 23, 0, step = 1, animate = F, width = \"200px\"),\r\n        sliderInput(\"time_until1\",\"TP2: Until what hour?\", 0, 23, 0, step = 1, animate = F, width = \"200px\"),\r\n        conditionalPanel(\r\n          condition = \"input.more_time_filters == '2' || input.more_time_filters == '3' || input.more_time_filters == '4'\",\r\n          tags$div(tags$h5(strong(\"Select Time Period filter 2\", class = \"blue_text\"))),\r\n          sliderInput(\"time_since2\", \"TP2: Since what hour?\", 0, 23, 0, step = 1, animate = F, width = \"200px\"),\r\n          sliderInput(\"time_until2\", \"TP2: Until what hour?\", 0, 23, 0, step = 1, animate = F, width = \"200px\")\r\n        ),\r\n        conditionalPanel(\r\n          condition = \"input.more_time_filters == '3' || input.more_time_filters == '4'\",\r\n          tags$div(tags$h5(strong(\"Select Time Period filter 3\", class = \"blue_text\"))),\r\n          sliderInput(\"time_since3\", \"TP3: Since what hour?\", 0, 23, 0, step = 1, animate = F, width = \"200px\"),\r\n          sliderInput(\"time_until3\", \"TP3: Until what hour?\", 0, 23, 0, step = 1, animate = F, width = \"200px\")\r\n        ),\r\n        conditionalPanel(\r\n          condition = \"input.more_time_filters == '4'\",\r\n          tags$div(tags$h5(strong(\"Select Time Period filter 4\", class = \"blue_text\"))),\r\n          sliderInput(\"time_since4\", \"TP4: Since what hour?\", 0, 23, 0, step = 1, animate = F, width = \"200px\"),\r\n          sliderInput(\"time_until4\", \"TP4: Until what hour?\", 0, 23, 0, step = 1, animate = F, width = \"200px\")\r\n        ),\r\n      ),\r\n      conditionalPanel(\r\n        condition = \"input.seespecstops == false\",\r\n        checkboxGroupInput(\"stop_names\", \"Display bus stop names in\", choices = c(\"Rows\" = \"row_names\", \"Columns\" = \"column_names\"), selected = c(\"row_names\", \"column_names\"), inline = T),\r\n      ),\r\n      conditionalPanel(\r\n        condition = \"input.seespecstops == true\",\r\n        checkboxInput(\"stop_names2\", \"Display bus stop names in cells\", F),\r\n      ),\r\n      actionButton(\"generate\", \"Generate Table\", width = \"140px\", icon = icon(\"table\")),\r\n      htmlOutput(\"result_conf\")\r\n    ),\r\n    mainPanel(\r\n      imageOutput(\"result_out\", inline = T)\r\n    )\r\n  )\r\n)\r\n\r\nserver <- function(input, output, session) {\r\n  \r\n  options(shiny.maxRequestSize=900*1024^2)\r\n  \r\n  discord_data <- reactive({input$discord_data})\r\n  svc <- reactive({if (!identical(discord_data()$svc, NULL)) {discord_data()$svc}\r\n    else {input$svc_in}})\r\n  dir <- reactive({if (!identical(discord_data()$dir, NULL)) {discord_data()$dir}\r\n    else {input$dir_in}})\r\n  svc_half <- reactive({if (!identical(discord_data()$svc_half, NULL)) {discord_data()$svc_half}\r\n    else {input$svc_half_in}})\r\n  sp_ori <- reactive({if (!identical(discord_data()$sp_ori, NULL)) {discord_data()$sp_ori}\r\n    else {input$ori_stops}})\r\n  sp_dst <- reactive({if (!identical(discord_data()$sp_dst, NULL)) {discord_data()$sp_dst}\r\n    else {input$dst_stops}})\r\n  spec_stops <- reactive({if (!identical(discord_data()$type_bool, NULL)) {discord_data()$type_bool}\r\n    else {input$seespecstops}})\r\n  day_filter <- reactive({if (!identical(discord_data()$day_type, NULL)) {discord_data()$day_type}\r\n    else {input$day_filter}})\r\n  time_filter <- reactive({if (identical(discord_data()$day_type, NULL) || identical(input$time_filter, FALSE)) {FALSE}\r\n    else {TRUE}})\r\n  time_periods <- reactive({\r\n    time_since_list <- vector(\"list\", 4)\r\n    time_until_list <- vector(\"list\", 4)\r\n    if (!identical(discord_data()$time_periods, NULL)) {\r\n      for (k in 1:4) {\r\n        time_since_list[[k]] <- input$discord_data[[paste0(\"period\", k)]][[\"time_since\"]]\r\n        time_until_list[[k]]  <- input$discord_data[[paste0(\"period\", k)]][[\"time_until\"]]\r\n      }\r\n    } else {\r\n      for (k in 1:4) {\r\n        time_since_list[[k]] <- input[[paste0(\"time_since\", k)]]\r\n        time_until_list[[k]]  <- input[[paste0(\"time_until\", k)]]\r\n      }\r\n    }\r\n    list(time_since_list = time_since_list, time_until_list = time_until_list)\r\n  })\r\n  display_stop_names <- reactive({list(discord_data()$rows, discord_data()$columns, discord_data()$cells)})\r\n  data1 <- reactiveVal(NULL)\r\n  data2 <- NULL\r\n  conf_msg <- reactiveVal(\"\")\r\n  conf_msg2 <- reactiveVal(\"\")\r\n  fetched_data <- reactiveVal(NULL)\r\n  \r\n  interval2hours <- function(start, end) {\r\n    start <- as.numeric(start)\r\n    end <- as.numeric(end)\r\n    if (start < end) {\r\n      return(start:(end - 1))\r\n    } else if (start > end) {\r\n      # wrap-around: from start to 23 and from 0 up to (end - 1)\r\n      return(c(start:23, if (end > 0) 0:(end - 1) else integer(0)))\r\n    } else {\r\n      # When both are equal, treat as full day.\r\n      return(0:23)\r\n    }\r\n  }\r\n\r\n  observeEvent(input$data1_in, {\r\n    req(input$data1_in, \"file_upload\" %in% input$import_select)\r\n    pre_data1 <- read.csv(input$data1_in$datapath, colClasses = c(\"ORIGIN_PT_CODE\" = \"character\", \"DESTINATION_PT_CODE\" = \"character\"))\r\n    if (!is.null(pre_data1)) {\r\n      data1(pre_data1)\r\n      conf_msg(\"<span style='color:#00DD00; font-weight:bold;'><i class='fas fa-square-check'><\/i> File upload from local storage successful!<\/span>\")\r\n    } else {\r\n      conf_msg(\"<span style='color:#BB0000; font-weight:bold;'><i class='fas fa-triangle-exclamation'><\/i> File upload failed. Please check for data corruption or correct file format.<\/span>\")\r\n    }\r\n  })\r\n\r\n  datamall_params <- eventReactive(input$import_datamall, {\r\n    if (input$use_own_key) {\r\n      account_key <- input$own_key\r\n    } else {\r\n      account_key <- \"1o+r1yqATGio3Rls/NnQGw==\"\r\n    }\r\n    list(\r\n      account_key = account_key\r\n    )\r\n  })\r\n  \r\n  observeEvent(input$import_repository, {\r\n    session$sendCustomMessage(\"fetch_drive\", \"\")\r\n  })\r\n  \r\n  observeEvent(datamall_params(), {\r\n    session$sendCustomMessage(\"fetch_datamall\", datamall_params())\r\n  })\r\n  \r\n  observeEvent(input$csv_data_in$data1, {\r\n    pre_data1 <- read.csv(text = input$csv_data_in$data1, colClasses = c(\"ORIGIN_PT_CODE\" = \"character\", \"DESTINATION_PT_CODE\" = \"character\"))\r\n    data1(pre_data1)\r\n  })\r\n  \r\n  observeEvent(input$discord_data$data1, {\r\n    pre_data1 <- read.csv(text = input$discord_data$data1, colClasses = c(\"ORIGIN_PT_CODE\" = \"character\", \"DESTINATION_PT_CODE\" = \"character\"))\r\n    data1(pre_data1)\r\n  })\r\n  \r\n  observeEvent(input$json_data_in, {\r\n    # If the JS sends a JSON string, store it directly.\r\n    if (is.null(data2)) {\r\n    fetched_data(input$json_data_in)\r\n    }\r\n  })\r\n  \r\n  observeEvent(input$generate, {\r\n    # Only send a fetch command if data2 hasn't been set yet.\r\n    if (is.null(data2)) {\r\n      if (!\"repository_import\" %in% input$import_select) {\r\n        # Send the custom message to fetch BusRouter data.\r\n        session$sendCustomMessage(\"fetch_busrouter\", \"\")\r\n      }\r\n    }\r\n  })\r\n  \r\n  result <- eventReactive(list(input$generate, fetched_data(), discord_data()), {\r\n    if (identical(discord_data(), NULL)) {\r\n      req(input$generate)\r\n    } else {\r\n      req(!is.null(discord_data()))\r\n    }\r\n    # Check that data1 exists before proceeding.\r\n    if (is.null(data1())) {\r\n      tryCatch({\r\n        conf_msg2(paste0(\"<span style='color:#BB0000; font-weight:bold;'><i class='fas fa-triangle-exclamation'><\/i> You need to upload something, if not what do you wanna see?!<\/span>\"))\r\n        stop(\"data1 not defined.\")\r\n      }, error = function(e) {\r\n        print(e$message)\r\n        stop(\"\")\r\n      })\r\n    }\r\n    if (is.null(data2)) {\r\n      req(fetched_data())\r\n      json_data <- fromJSON(fetched_data())\r\n      data2 <- json_data$data2\r\n      data3 <- json_data$data3\r\n    }\r\n    print(cat(substr(data1(), 1, 200)))\r\n    svc2 <- as.character(svc())\r\n    dir2 <- as.numeric(dir())\r\n    if (identical(day_filter(), \"combined\")) {\r\n      day_type <- \"Combined\"\r\n    } else if (identical(day_filter(), \"weekday\")) {\r\n      day_type <- \"Weekday\"\r\n    } else if (identical(day_filter(), \"weekend_ph\")) {\r\n      day_type <- \"Weekend/PH\"\r\n    }\r\n    filter_day_type <- if (\"weekday\" %in% day_filter()) {\r\n      quo(DAY_TYPE == \"WEEKDAY\")\r\n    } else if (\"weekend_ph\" %in% day_filter()) {\r\n      quo(DAY_TYPE == \"WEEKENDS/HOLIDAY\")\r\n    } else {\r\n      quo(TRUE)\r\n    }\r\n    if (time_filter()) {\r\n      time_period <- NULL \r\n      if (!identical(discord_data()$time_periods, NULL)) {\r\n        defined_periods <- discord_data()$time_periods\r\n        for (name in names(defined_periods)) {\r\n          period_start <- defined_periods[[name]][[\"time_since\"]]\r\n          period_end   <- defined_periods[[name]][[\"time_until\"]]\r\n          period_hours <- interval2hours(period_start, period_end)\r\n          valid_hours <- sort(unique(c(valid_hours, period_hours)))\r\n          if (is.null(time_period)) {\r\n            time_period <- paste0(\"From \", if (nchar(period_start) == 2) period_start else paste0(\"0\", period_start), \":00 to \", if (nchar(period_end) == 2) period_end else paste0(\"0\", period_end), \":00\")\r\n          } else {\r\n            extra_period <- paste0(if (nchar(period_start) == 2) period_start else paste0(\"0\", period_start), \":00 to \", if (nchar(period_end) == 2) period_end else paste0(\"0\", period_end), \":00\")\r\n            time_period <- paste0(time_period, \", \", extra_period)\r\n          }\r\n        }\r\n      } else {\r\n        total_periods <- as.numeric(input$more_time_filters)\r\n        for (i in 1:total_periods) {\r\n          period_start <- time_periods()$time_since_list[[i]]\r\n          period_end <- time_periods()$time_until_list[[i]]\r\n          period_hours <- interval2hours(period_start, period_end)\r\n          valid_hours <- sort(unique(c(valid_hours, period_hours)))\r\n          if (i == 1) {\r\n            time_period <- paste0(\"From \", if (nchar(period_start) == 2) period_start else paste0(\"0\", period_start), \":00 to \", if (nchar(period_end) == 2) period_end else paste0(\"0\", period_end), \":00\")\r\n          } else {\r\n            extra_period <- paste0(if (nchar(period_start) == 2) period_start else paste0(\"0\", period_start), \":00 to \", if (nchar(period_end) == 2) period_end else paste0(\"0\", period_end), \":00\")\r\n            time_period <- paste0(time_period, \", \", extra_period)\r\n          }\r\n        }\r\n      }\r\n      filter_time_period <- quo(TIME_PER_HOUR %in% valid_hours)\r\n    } else {\r\n      filter_time_period <- quo(TRUE)\r\n      time_period <- \"Full Day\"\r\n    }\r\n    if (identical(spec_stops(), F)) {\r\n      stop_half_opt = svc_half()\r\n      stop_cur <- data2[[svc2]]$routes[[dir2]]\r\n      print(data2[[svc2]]$routes)\r\n      if (is.null(stop_cur)) {\r\n        tryCatch({\r\n          conf_msg2(paste0(\"<span style='color:#BB0000; font-weight:bold;'><i class='fas fa-triangle-exclamation'><\/i> Invalid bus service. Is your bus service withdrawn?<\/span>\"))\r\n          stop(\"Invalid bus service.\")\r\n        }, error = function(e) {\r\n          stop(e$message)\r\n        })\r\n      }\r\n      terminus <- data3[[(stop_cur[length(stop_cur)])]][[3]]\r\n      is_2way <- length(data2[[svc2]]$routes)\r\n      stop_half <- round(length(stop_cur)/2)\r\n      if (is_2way == 2){\r\n        if (identical(stop_half_opt, \"1st half\")){\r\n          stop_cur2 <- stop_cur[1:(stop_half+3)]\r\n          dir_graph <- paste0(\"Direction \",dir2,\"\\n(\",stop_half_opt,\")\")\r\n        } else if (identical(stop_half_opt, \"2nd half\")) {\r\n          stop_cur2 <- stop_cur[(stop_half-3):length(stop_cur)]\r\n          dir_graph <- paste0(\"Direction \",dir2,\"\\n(\",stop_half_opt,\")\")\r\n        } else {\r\n          stop_cur2 <- stop_cur\r\n          dir_graph <- paste(\"Direction \",dir2)\r\n        } \r\n      } else {\r\n        if (identical(stop_half_opt, \"1st half\")){\r\n          stop_cur2 <- stop_cur[1:(3+stop_half)]\r\n          dir_graph <- paste0(\"Direction 1\\n(\",stop_half_opt,\")\")\r\n        } else if (identical(stop_half_opt, \"2nd half\")) {\r\n          stop_cur2 <- stop_cur[(stop_half-2):length(stop_cur)]\r\n          dir_graph <- paste0(\"Direction 1\\n(\",stop_half_opt,\")\")\r\n        } else {\r\n          stop_cur2 <- stop_cur\r\n          dir_graph <- \"Loop Svc\"\r\n        }}\r\n      V <- length(stop_cur2)\r\n      stop_names <- data.frame(as.character(c(stop_cur2)),c(1:V))\r\n      for (j in 1:V){\r\n        stop_names[j,2] <- data3[[(stop_cur2[j])]][[3]]\r\n      }\r\n      stop_cur0a <- data.frame(org = 1:V, ORIGIN_PT_CODE = stop_cur2)\r\n      stop_cur0b <- data.frame(dst = 1:V, DESTINATION_PT_CODE = stop_cur2)\r\n      dataod <- data1() %>%\r\n      filter(., ORIGIN_PT_CODE %in% stop_cur2 | is.na(ORIGIN_PT_CODE),\r\n            DESTINATION_PT_CODE %in% stop_cur2 | is.na(DESTINATION_PT_CODE),\r\n            !!filter_day_type, !!filter_time_period) %>%  \r\n      group_by(ORIGIN_PT_CODE, DESTINATION_PT_CODE) %>%\r\n      summarise(total = sum(TOTAL_TRIPS, na.rm = TRUE), .groups = \"drop\")\r\n      missing_org <- setdiff(stop_cur2, unique(dataod$ORIGIN_PT_CODE)) # Check for missing origin stops\r\n      missing_dst <- setdiff(stop_cur2, unique(dataod$DESTINATION_PT_CODE)) # Check for missing destination stops\r\n      if (length(missing_org) > 0) {\r\n        extra_rows <- tibble(ORIGIN_PT_CODE = unique(missing_org), DESTINATION_PT_CODE = NA, total = 0)  \r\n        dataod <- bind_rows(dataod, extra_rows) %>%\r\n          distinct(ORIGIN_PT_CODE, DESTINATION_PT_CODE, .keep_all = TRUE)  # Ensure uniqueness\r\n      }\r\n      if (length(missing_dst) > 0) {\r\n        extra_rows <- tibble(ORIGIN_PT_CODE = missing_dst, DESTINATION_PT_CODE = missing_dst, total = 0)  # Ensure uniqueness\r\n        dataod <- bind_rows(dataod, extra_rows) %>%\r\n          filter(DESTINATION_PT_CODE %in% stop_cur2)  # Ensure proper alignment\r\n      }\r\n      dataod0a <- full_join(dataod, stop_cur0a, by=\"ORIGIN_PT_CODE\")\r\n      dataod0b <- full_join(dataod0a, stop_cur0b, by=\"DESTINATION_PT_CODE\")\r\n      dataod2 <- dataod0b[order(dataod0b$org, dataod0b$dst), ]\r\n      dataod2$total <- as.numeric(dataod2$total)\r\n      dataod2a <- dataod2[,c(5,4,3)]\r\n      dataod2b <- dataod2[,c(2,1,3)]\r\n      dataod2c <- dataod2a %>%\r\n        spread(key = org, value = total, fill = NA)\r\n      extra_row <- setdiff(unique(dataod2c$dst), stop_cur2)  # Identify the unwanted row\r\n      dataod2c[is.na(dataod2c)] <- 0\r\n      dataod2c <- dataod2c %>%\r\n        filter(dst != 0)  # Keeps all valid rows, removes the incorrect one\r\n      stop_cur3a <- stop_cur2[1:V-1]\r\n      stop_cur3b <- stop_cur2[2:V]\r\n      dataod2e <- as.matrix(dataod2c)\r\n      dataod2e <- dataod2e[,-1]\r\n      if (ncol(dataod2e)!=(V-1)){\r\n        dataod2e <- dataod2e[,-ncol(dataod2e)]\r\n      }\r\n      if (nrow(dataod2e)!=(V-1)){\r\n        dataod2e <- dataod2e[-1,]\r\n      }\r\n      dataod2g <- dataod2e\r\n      dataod2h <- dataod2g\r\n      rownames(dataod2g) <- paste(2:V)\r\n      colnames(dataod2h) <- paste(stop_cur3a)\r\n      rownames(dataod2h) <- paste(stop_cur3b)\r\n      odgroup_crowd <- rep(\"Origin stop\",V-1)\r\n      odgroup1 <- odgroup_crowd\r\n      cols = colorRamp2(c(0, 1, 30, 300, 1500, 6000, 30000, 99000), c(\"gray60\",\"white\",\"white\", \"yellow\", \"orange\", \"red\", \"darkred\",\"black\"))\r\n      max_length <- 2 * max(nchar(stop_names[,2]))\r\n      column_labels <- if (\"column_names\" %in% input$stop_names || display_stop_names()$columns == TRUE) {\r\n        paste(stop_names[1:nrow(stop_names)-1,1], \"     \", stop_names[1:nrow(stop_names)-1,2], sep = \"\")\r\n      } else {\r\n        paste(stop_names[1:nrow(stop_names)-1,1])\r\n      }\r\n      row_labels <- if (\"row_names\" %in% input$stop_names || display_stop_names()$rows == TRUE) {\r\n        paste(stop_names[2:nrow(stop_names),2], \"     \", stop_names[2:nrow(stop_names),1], sep = \"\")\r\n      } else {\r\n        paste(stop_names[2:nrow(stop_names)-1,1])\r\n      }\r\n      img_dims <- list(width = 39 * ncol(dataod2h) + 300, height = 22 * nrow(dataod2h) + 200)\r\n      img <- Heatmap(dataod2h,\r\n        name = paste(\"O-D matrix (en-route)\\n\",data1()$YEAR_MONTH[[1]], \"\\n\",day_type,\" Demand\\n\\nService \",svc2,\"\\n\",dir_graph,\"\\n\",terminus,\" Bound\\n\",sep = \"\"),\r\n        show_column_dend = FALSE,\r\n        show_row_dend = FALSE,\r\n        row_dend_reorder = FALSE,\r\n        column_dend_reorder = FALSE,\r\n        column_title = paste0(time_period, \"\\nOrigin Bus Stops\"),\r\n        column_title_side = \"top\",\r\n        row_title = \"Destination Bus Stops\",\r\n        row_names_side = \"left\",\r\n        column_names_side = \"top\",\r\n        column_names_rot = 40,\r\n        column_labels = column_labels,\r\n        row_labels = row_labels,\r\n        col = cols,\r\n        na_col = \"gray60\",\r\n        column_split = odgroup1,\r\n        column_gap = unit(2, \"mm\"),\r\n        cluster_rows = FALSE,\r\n        cluster_columns = FALSE,\r\n        row_order = stop_cur3b,\r\n        column_order = stop_cur3a, \r\n        row_names_gp = gpar(fontsize = pmin(ncol(dataod2h) / 3 + 9, 15), just = \"right\"),\r\n        column_names_gp = gpar(fontsize = pmin(ncol(dataod2h) / 3 + 9, 15)),\r\n        row_title_gp = gpar(fontsize = pmin(ncol(dataod2h) / 3 + 12, 25), just = \"left\"),\r\n        column_title_gp = gpar(fontsize = pmin(ncol(dataod2h) / 3 + 12, 25)),\r\n        row_names_max_width = unit(max_length, \"cm\"),\r\n        column_names_max_height = unit(max_length, \"cm\"),\r\n        heatmap_legend_param = list(labels_gp = gpar(fontsize = pmin(ncol(dataod2h) / 3 + 9, 18)), legend_height = unit(pmin(nrow(dataod2h) / 4 + 1, 8), \"cm\"), at = c(0, 300, 1500, 6000, 30000, 99000), legend_width = unit(2, \"cm\"), color_bar = \"continuous\", title_gp = gpar(fontsize = pmin(ncol(dataod2h) / 3 + 9, 18), fontface = 'bold'), break_dist = 1),\r\n        cell_fun = function(j, i, x, y, width, height, fill) {\r\n          if(dataod2h[i, j] > 10000){\r\n            grid.text(sprintf(\"%.0f\", dataod2h[i, j]), x, y, gp = gpar(fontsize = 13, col = \"white\"))\r\n          } else if (dataod2h[i, j] > 5000) {\r\n            grid.text(sprintf(\"%.0f\", dataod2h[i, j]), x, y, gp = gpar(fontsize = 14, col = \"white\"))\r\n          } else if(dataod2h[i, j] > 29){\r\n            grid.text(sprintf(\"%.0f\", dataod2h[i, j]), x, y, gp = gpar(fontsize = 14))\r\n          }\r\n        },\r\n        rect_gp = gpar(col = \"black\", lwd = 0.2))\r\n    } else {\r\n      ori_stops <- str_split(sp_ori(), \",\")\r\n      dst_stops <- str_split(sp_dst(), \",\")\r\n      l_ori <- length(ori_stops[[1]])\r\n      l_dst <- length(dst_stops[[1]])\r\n      if (l_ori != l_dst) {\r\n        tryCatch({\r\n          conf_msg2(paste0(\"<span style='color:#BB0000; font-weight:bold;'><i class='fas fa-triangle-exclamation'><\/i> The lengths of your origin stops and destination stops do not match.<\/span>\"))\r\n          stop(\"Length of origin stops not equal to length of destination stops.\")\r\n        }, error = function(e) {\r\n          stop(e$message)\r\n        })\r\n      }\r\n      dataod3 <- data.frame(c(1:l_ori), c(1:l_ori), c(1:l_ori))\r\n      dataod3a <- data.frame(c(1:l_ori), c(1:l_ori))\r\n      colnames(dataod3) <- c(\"ori\", \"dst\", \"dmd\")\r\n      colnames(dataod3a) <- c(\"ori_name\", \"dst_name\")\r\n      for (t in 1:l_ori) {\r\n        ori_stop <- as.numeric(ori_stops[[1]][[t]])\r\n        dst_stop <- as.numeric(dst_stops[[1]][[t]])\r\n        dataod3[t, 1] <- ori_stop\r\n        dataod3[t, 2] <- dst_stop\r\n        valid_stops <- nrow(filter(data1(),\r\n          ORIGIN_PT_CODE %in% dataod3[t, 1] | is.na(ORIGIN_PT_CODE),\r\n          DESTINATION_PT_CODE %in% dataod3[t, 2] | is.na(DESTINATION_PT_CODE),\r\n          !!filter_day_type, !!filter_time_period))\r\n        if (valid_stops == 0) {\r\n          tryCatch({\r\n            conf_msg2(paste0(\"<span style='color:#BB0000; font-weight:bold;'><i class='fas fa-triangle-exclamation'><\/i> Invalid bus stop code(s) detected! Check your codes to see if it's a proper O-D pair, or there's absolutely no one going from A to B.<\/span>\"))\r\n            stop(\"Invalid stop codes or no demand.\")\r\n          }, error = function(e) {\r\n            stop(e$message)\r\n          })\r\n        }\r\n        dataod3[t, 3] <- data1() %>%\r\n          filter(., ORIGIN_PT_CODE == dataod3[t, 1],\r\n            DESTINATION_PT_CODE == dataod3[t, 2],\r\n            !!filter_day_type,\r\n            !!filter_time_period) %>%\r\n          summarise(Total = sum(TOTAL_TRIPS)) %>%\r\n          pull(Total) %>%\r\n          as.numeric()\r\n        if (\"row_names\" %in% input$stop_names || display_stop_names()$cells == TRUE) {\r\n          dataod3a[t, 1] <- data3[[as.character(ori_stop)]][[3]]\r\n          dataod3a[t, 2] <- data3[[as.character(dst_stop)]][[3]]\r\n         }\r\n      }\r\n      dataod3 <- as.matrix(dataod3)\r\n      dataod3a <- as.matrix(dataod3a)\r\n      cols = colorRamp2(c(0, 1, 30, 300, 1500, 6000, 30000, 99000), c(\"gray60\",\"white\",\"white\", \"yellow\", \"orange\", \"red\", \"darkred\",\"black\"))\r\n      img_dims <- list(width = 520, height = 24 * nrow(dataod3) + 90)\r\n      img <- Heatmap(dataod3,\r\n        name = paste(day_type, \"Demand,\", time_period),\r\n        show_column_dend = FALSE,\r\n        show_row_dend = FALSE,\r\n        row_dend_reorder = FALSE,\r\n        column_dend_reorder = FALSE,\r\n        column_title = \"O-D Matrix for specific stops\",\r\n        column_title_side = \"top\",\r\n        column_names_side = \"top\",\r\n        column_names_rot = 0,\r\n        column_names_centered = TRUE,\r\n        column_labels = c(\"Origin\", \"Destination\", \"Demand\"),\r\n        col = cols,\r\n        na_col = \"gray60\",\r\n        column_gap = unit(2, \"mm\"),\r\n        cluster_rows = FALSE,\r\n        cluster_columns = FALSE,\r\n        column_names_gp = gpar(fontsize = 15),\r\n        column_title_gp = gpar(fontsize = 25),\r\n        heatmap_legend_param = list(labels_gp = gpar(fontsize = 12), legend_width = unit(10, \"cm\"), legend_direction = \"horizontal\", at = c(0, 300, 1500, 6000, 30000, 99000), legend_width = unit(2, \"cm\"), color_bar = \"continuous\", break_dist = 1, title_position = \"topcenter\", heatmap_legend_side = \"top\", title_gp = gpar(fontsize = 12, fontface = \"bold\")),\r\n        cell_fun = function(j, i, x, y, width, height, fill) {\r\n          if(j %in% c(1, 2)) {\r\n            # Draw a white background covering the cell.\r\n            grid.rect(\r\n              x = x, y = y, width = width, height = height,\r\n              gp = gpar(fill = \"white\", col = \"black\", lwd = 0.2)\r\n            )\r\n            if (input$stop_names2 || display_stop_names()$cells == TRUE) {\r\n              grid.text(sprintf(\"%s\\n%s\", dataod3[i, j], dataod3a[i, j]), x, y, gp = gpar(fontsize = 11, col = \"black\"))\r\n            } else {\r\n              grid.text(sprintf(\"%s\", dataod3[i, j]), x, y, gp = gpar(fontsize = 15, col = \"black\"))\r\n            }\r\n          }\r\n          if (j ==3) {\r\n            if(dataod3[i, j] > 5000){\r\n              grid.text(sprintf(\"%.0f\", dataod3[i, j]), x, y, gp = gpar(fontsize = 15, col = \"white\"))\r\n            }\r\n            else if(dataod3[i, j] >= 0){\r\n              grid.text(sprintf(\"%.0f\", dataod3[i, j]), x, y, gp = gpar(fontsize = 15))\r\n            }\r\n          }\r\n        },\r\n        rect_gp = gpar(col = \"black\", lwd = 0.2))\r\n      }\r\n      list(img = img, img_dims = img_dims)\r\n  })\r\n  draw_heatmap <- function(heatmap, img_dims) {\r\n    # Retrieve dimensions\r\n    img_width  <- 1.5 * img_dims$width\r\n    img_height <- 1.5 * img_dims$height\r\n    \r\n    # Create a temporary PNG file\r\n    temp_file <- tempfile(fileext = \".png\")\r\n    while (dev.cur() > 1L) {\r\n      dev.off()\r\n    }\r\n    png(filename = temp_file, width = img_width, height = img_height, units = \"px\", res = 96)\r\n    grid::grid.newpage()\r\n    \r\n    # Draw the heatmap\r\n    if (identical(spec_stops(), FALSE)) {\r\n      req(result())\r\n      draw(result()$img)\r\n      conf_msg2(\"<span style='color:#00DD00; font-weight:bold;'><i class='fas fa-square-check'><\/i> Heatmap successfully drawn!<\/span>\")\r\n    } else {\r\n      req(result())\r\n      draw(result()$img, heatmap_legend_side = \"top\")\r\n      conf_msg2(\"<span style='color:#00DD00; font-weight:bold;'><i class='fas fa-square-check'><\/i> Heatmap successfully drawn!<\/span>\")\r\n    }\r\n    dev.off()\r\n    list(\r\n      src = temp_file,\r\n      contentType = \"image/png\",\r\n      width = img_width,\r\n      height = img_height,\r\n      alt = \"Demand Heatmap\"\r\n    )\r\n  }\r\n  output$result_out <- renderImage({\r\n    req(result())\r\n    draw_heatmap(result()$img, result()$img_dims)\r\n  }, deleteFile = FALSE)\r\n  discord_image <- eventReactive(result(), {\r\n    req(result())\r\n    discord_img <- draw_heatmap(result()$img, result()$img_dims)\r\n    session$sendCustomMessage(\"send_image\", discord_img)\r\n  })\r\n  observe(result())\r\n  output$upload_conf <- renderText({HTML(conf_msg())})\r\n  output$result_conf <- renderText({HTML(conf_msg2())})\r\n}\r\n\r\nshinyApp(ui, server)\r\nshinyApp(ui = ui, server = server)","type":"text"}]
