[{"name":"app.R","content":"suppressPackageStartupMessages(library(shiny))\r\nsuppressPackageStartupMessages(library(rjson))\r\nsuppressPackageStartupMessages(library(ComplexHeatmap))\r\nsuppressPackageStartupMessages(library(circlize))\r\nsuppressPackageStartupMessages(library(htmltools))\r\nsuppressPackageStartupMessages(library(dplyr))\r\nsuppressPackageStartupMessages(library(tidyr))\r\nsuppressPackageStartupMessages(library(shinythemes))\r\nsuppressPackageStartupMessages(library(stringr))\r\nsuppressPackageStartupMessages(library(shinyWidgets))\r\nprint(\"VVV All error messages from the app are below this line VVV\")\r\n\r\n# Determine the month ranges available.\r\ncurrent_date <- str_split(Sys.Date(),\"-\")\r\ncurrent_year <- as.numeric(current_date[[1]][[1]])\r\ncurrent_month <- as.numeric(current_date[[1]][[2]])\r\ncurrent_day <- as.numeric(current_date[[1]][[3]])\r\nif (current_day >= 10) {\r\n  if (current_month == 1) {\r\n    min_month <- paste0(current_year-1,\"-\",10)\r\n    max_month <- paste0(current_year-1,\"-\",12)\r\n  } else if (current_month == 2 | current_month == 3) {\r\n    min_month <- paste0(current_year-1,\"-\",9+current_month)\r\n    max_month <- paste0(current_year,\"-\",current_month-1)\r\n  } else {\r\n    min_month <- paste0(current_year,\"-\",current_month-3)\r\n    max_month <- paste0(current_year,\"-\",current_month-1)\r\n  }\r\n} else {\r\n  if (current_month == 1 | current_month == 2) {\r\n    min_month <- paste0(current_year-1,\"-\",8+current_month)\r\n    max_month <- paste0(current_year-1,\"-\",10+current_month)\r\n  } else if (current_month == 3 | current_month == 4) {\r\n    min_month <- paste0(current_year-1,\"-\",8+current_month)\r\n    max_month <- paste0(current_year,\"-\",current_month-2)\r\n  } else {\r\n    min_month <- paste0(current_year,\"-\",current_month-4)\r\n    max_month <- paste0(current_year,\"-\",current_month-2)\r\n  }\r\n}\r\nrepo_min_month <- \"2025-03\"\r\nif (current_day >= 2) {\r\n  busrouter_max_month <- paste0(current_year,\"-\",current_month)\r\n} else {\r\n  busrouter_max_month <- paste0(current_year,\"-\",current_month-1)\r\n}\r\n\r\nui <- fluidPage(\r\n  \r\n  tags$head(\r\n    tags$style(HTML(\"\r\n      body {\r\n        background-color: #3F3F3F;\r\n      }\r\n      .import_shift {\r\n        margin-top: 25px;\r\n      }\r\n      .red_text {\r\n        color: #BB0000;\r\n      }\r\n      .green_text {\r\n        color: #00DD00;\r\n      }\r\n      .blue_text {\r\n        color: #2050C0;\r\n      }\r\n      input[type='checkbox'],\r\n      input[type='radio'] {\r\n        accent-color: #007BFF;\r\n      }\r\n      \")),\r\n    tags$script(src = \"../www/data_importing.js\"),\r\n    tags$script(src = \"../www/discord_data_transfer.js\")\r\n  ),\r\n  \r\n  titlePanel(tags$p(style = \"color: white; text-align: center\", \"Bus Route Demand Visualiser 1.3.2\")),\r\n  sidebarLayout(\r\n    sidebarPanel(\r\n      width = 6,\r\n      style = \"background-color: #7F7F7F;\",\r\n      tags$div(tags$h4(strong(tags$i(icon(\"file-import\")), \"Please import your data from BusRouter and Datamall.\"))),\r\n      tags$div(tags$h5(strong(\"Import from Datamall\", class = \"blue_text\"))),\r\n      radioButtons(\"import_select\",\"Import data from\", choices = c(\"Datamall\" = \"datamall_import\", \"Repository\" = \"repository_import\", \"File upload\" = \"file_upload\"), inline = T),\r\n      conditionalPanel(\r\n        condition = \"input.import_select == 'datamall_import' || input.import_select == 'repository_import'\",\r\n        selectInput(\"datamall_data_type\", \"Origin-Destination data or specific bus stop/station data?\", choices = c(\"Origin-destination\" = \"origin_destination\", \"Specific bus stop / MRT/LRT station tap in/outs\" = \"specific_stop\"), width = \"500px\"),\r\n        selectInput(\"datamall_data_type2\", \"Bus or train data?\", choices = c(\"Bus\" = \"bus\", \"Train\" = \"train\"), width = \"500px\"),\r\n      ),\r\n      conditionalPanel(\r\n        condition = \"input.import_select == 'datamall_import'\",\r\n        tags$div(tags$h5(strong(tags$i(icon(\"triangle-exclamation\")), \"If the default account keys are rate limited, use your own.\", class = \"red_text\"))),\r\n        checkboxInput(\"use_own_key\", \"Use your own account key\", F),\r\n        conditionalPanel(\r\n          condition = \"input.use_own_key == false\",\r\n          selectInput(\"default_key\", \"Select one of the default keys\", choices = c(\"Default key 1\" = \"1o+r1yqATGio3Rls/NnQGw==\", \"Default key 2\" = \"bLMF/fYdRzqPUXnRVSrw8w==\"), width = \"500px\")\r\n        ),\r\n        conditionalPanel(\r\n          condition = \"input.use_own_key == true\",\r\n          textInput(\"own_key\", HTML(paste(icon(\"key\"), \"Your account key\")),value = NA, width = \"500px\")\r\n        ),\r\n        tags$div(tags$h5(strong(tags$i(icon(\"triangle-exclamation\")), \"Please wait until you receive '... data import from Datamall successful!'.\", class = \"red_text\"))),\r\n        fluidRow(\r\n          splitLayout(\r\n            paste(\" \"),\r\n            airDatepickerInput(\"datamall_date\", HTML(paste(icon(\"calendar\"), \"Select Date\")), value = NULL, minDate = min_month, maxDate = max_month, dateFormat = \"yyyy-MM\", view = \"months\", minView = \"months\", width = \"100px\", addon = \"none\", readonly = TRUE, autoClose = TRUE),\r\n            div(class = \"import_shift\", actionButton(\"import_datamall\", \"Import from Datamall\", width = \"180px\", icon = icon(\"file-import\"))),\r\n            cellWidths = c(\"10px\",\"100px\",\"180px\")\r\n          )\r\n        )\r\n      ),\r\n      conditionalPanel(\r\n        condition = \"input.import_select == 'repository_import'\",\r\n        tags$div(tags$h5(strong(tags$i(icon(\"triangle-exclamation\")), \"Please wait until you receive 'Datamall ... data import from repository successful!'.\", class = \"red_text\"))),\r\n        fluidRow(\r\n          splitLayout(\r\n            paste(\" \"),\r\n            airDatepickerInput(\"od_matrix_date\", HTML(paste(icon(\"calendar\"), \"Select Date\")), value = NULL, minDate = repo_min_month, maxDate = max_month, dateFormat = \"yyyy-MM\", view = \"months\", minView = \"months\", width = \"100px\", addon = \"none\", readonly = TRUE, autoClose = TRUE),\r\n            div(class = \"import_shift\", actionButton(\"import_repository\", \"Import from repository\", icon = icon(\"file-import\"), width = \"180px\")),\r\n            cellWidths = c(\"10px\",\"100px\",\"180px\")\r\n          )\r\n        )\r\n      ),\r\n      conditionalPanel(\r\n        condition = \"input.import_select == 'file_upload'\",\r\n        tags$div(tags$h5(strong(tags$i(icon(\"circle-info\")), \"Supports both bus and train origin-destination/specific stop CSVs.\", class = \"blue_text\"))),\r\n        tags$div(tags$h5(strong(tags$i(icon(\"triangle-exclamation\")), \"Please wait until you receive 'File upload from local storage successful!'.\", class = \"red_text\"))),\r\n        fileInput(\"data1_in\", \"Upload LTA Origin-Destination CSV\", width = \"500px\",\r\n                  accept = c(\".csv\", \".docx\", \".doc\"),\r\n        )),\r\n      htmlOutput(\"upload_conf\"),\r\n      tags$div(tags$h5(strong(\"Import from BusRouter\", class = \"blue_text\"))),\r\n      tags$div(tags$h5(strong(tags$i(icon(\"circle-info\")), \"You can import MRT/LRT lines and station names data from the repository, just that the date does nothing.\", class = \"blue_text\"))),\r\n      tags$div(tags$h5(strong(tags$i(icon(\"circle-info\")), \"File uploading supports both data types, but file names matter. Select 'File upload' to see more info.\", class = \"blue_text\"))),\r\n      radioButtons(\"import_select2\", \"Import data from\", choices = c(\"BusRouter\" = \"busrouter_import\", \"Repository\" = \"repository_import\", \"File upload\" = \"file_upload\"), inline = T),\r\n      conditionalPanel(\r\n        condition = \"input.import_select2 == 'busrouter_import'\",\r\n        actionButton(\"import_busrouter\", \"Import from BusRouter\", width = \"190px\", icon = icon(\"file-import\")),\r\n      ),\r\n      conditionalPanel(\r\n        condition = \"input.import_select2 == 'repository_import'\",\r\n        radioButtons(\"json_data_type\", \"Bus or train data?\", choices = c(\"Bus\" = \"bus\", \"Train\" = \"train\"), inline = T),\r\n        fluidRow(\r\n          splitLayout(\r\n            paste(\"\"),\r\n            airDatepickerInput(\"busrouter_date\", HTML(paste(icon(\"calendar\"), \"Select Date\")), value = NULL, minDate = repo_min_month, maxDate = busrouter_max_month, dateFormat = \"yyyy-MM\", view = \"months\", minView = \"months\", width = \"100px\", addon = \"none\", readonly = TRUE, autoClose = TRUE),\r\n            div(class = \"import_shift\", actionButton(\"import_repository2\", \"Import from repository\", icon = icon(\"file-import\"), width = \"180px\")),\r\n            cellWidths = c(\"10px\",\"100px\",\"180px\")\r\n          )\r\n        )\r\n      ),\r\n      conditionalPanel(\r\n        condition = \"input.import_select2 == 'file_upload'\",\r\n        tags$div(tags$h5(strong(tags$i(icon(\"triangle-exclamation\")), \"BusRouter data must follow 'services_YYYYMM.json' and 'stops_YYYYMM.json'!\", class = \"red_text\"))),\r\n        tags$div(tags$h5(strong(tags$i(icon(\"triangle-exclamation\")), \"MRT/LRT lines and station names must be exactly 'stations.json' and 'station_names.json' respectively!\", class = \"red_text\"))),\r\n        fileInput(\"data2_in\", \"Upload BusRouter services or MRT/LRT stations JSON\", width = \"500px\",\r\n                  accept = c(\".json\")),\r\n        fileInput(\"data3_in\", \"Upload BusRouter stops or MRT/LRT stop names JSON\", width = \"500px\",\r\n                  accept = c(\".json\"))\r\n      ),\r\n      htmlOutput(\"upload_conf2\"),\r\n      htmlOutput(\"upload_conf3\"),\r\n      tags$div(tags$h4(strong(tags$i(icon(\"table\")), \"Select what type of data to view.\"))),\r\n      selectInput(\"heatmap_type\", \"Select heatmap type\", choices = c(\"If you are seeing this, something is wrong...\" = \"error\"), width = \"500px\"),\r\n      conditionalPanel(\r\n        condition = \"input.heatmap_type == 'by_bus_svc'\",\r\n        textInput(\"svc_in\", HTML(paste(icon(\"bus\"), \"Which bus service would you like to see?\")), width = \"500px\"),\r\n        radioButtons(\"svc_half_in\", HTML(paste(icon(\"scissors\"), \"Do you want to split route in half?\")), width = \"500px\", choices = c(\"Full\", \"1st half\", \"2nd half\"), inline = T),\r\n        radioButtons(\"dir1_in\", HTML(paste(icon(\"right-left\"), \"Which direction? For loop\", icon(\"rotate\"), \", put as 1.\")), width = \"500px\", choices = c(1,2), inline = T)\r\n      ),\r\n      conditionalPanel(\r\n        condition = \"input.heatmap_type == 'by_specific_stops' ||  input.heatmap_type == 'by_specific_stop'\",\r\n        conditionalPanel(\r\n          condition = \"input.heatmap_type == 'by_specific_stops'\",\r\n          tags$div(tags$h5(strong(tags$i(icon(\"triangle-exclamation\")), \"The bus stops you listed in the origin box must be paired with a corresponding bus stop in order in the destination box.\", class = \"red_text\"))),\r\n          tags$div(tags$h5(strong(tags$i(icon(\"circle-info\")), \"For example, if you put 10009,10011 as origin, 10017,10018 as destination, 10009 pairs with 10017, 10011 pairs with 10018.\", class = \"blue_text\")))\r\n        ),\r\n        textInput(\"ori_stops\", \"Which specific (origin) stops? Put a comma between bus stops.\", width = \"500px\"),\r\n        conditionalPanel(\r\n          condition = \"input.heatmap_type == 'by_specific_stops'\",\r\n          textInput(\"dst_stops\", \"Which specific destination stops? Put a comma between bus stops.\", width = \"500px\")\r\n        )\r\n      ),\r\n      conditionalPanel(\r\n        condition = \"input.heatmap_type == 'by_mrt_line'\",\r\n        tags$div(tags$h5(strong(tags$i(icon(\"circle-info\")), \"West loop (SKPG) and Service A (BP) is dir 1. Direction 1 always counts up (except BPLRT).\", class = \"blue_text\"))),\r\n        textInput(\"mrt_line_in_1\", HTML(paste(icon(\"train-subway\"), \"Which origin train line?\")), width = \"500px\"),\r\n        radioButtons(\"dir2a_in\", HTML(paste(icon(\"right-left\"), \"Which direction?\")), width = \"500px\", choices = c(1,2), inline = T),\r\n        textInput(\"mrt_line_in_2\", HTML(paste(icon(\"train-subway\"), \"Which destination train line?\")), width = \"500px\"),\r\n        radioButtons(\"dir2b_in\", HTML(paste(icon(\"right-left\"), \"Which direction?\")), width = \"500px\", choices = c(1,2), inline = T),\r\n      ),\r\n      conditionalPanel(\r\n        condition = \"input.heatmap_type == 'by_specific_stns' || input.heatmap_type == 'by_specific_stn'\",\r\n        conditionalPanel(\r\n          condition = \"input.heatmap_type == 'by_specific_stns'\",\r\n          tags$div(tags$h5(strong(tags$i(icon(\"triangle-exclamation\")), \"The stations you listed in the origin box must be paired with a corresponding station in order in the destination box.\", class = \"red_text\"))),\r\n          tags$div(tags$h5(strong(tags$i(icon(\"circle-info\")), \"For example, if you put EW1,EW2 as origin, EW3,EW4 as destination, EW1 pairs with EW3, EW2 pairs with EW4.\", class = \"blue_text\")))\r\n        ),\r\n        textInput(\"ori_stns\", \"Which specific (origin) stations? Put a comma between stations.\", width = \"500px\"),\r\n        conditionalPanel(\r\n          condition = \"input.heatmap_type == 'by_specific_stns'\",\r\n          textInput(\"dst_stns\", \"Which specific destination stations? Put a comma between stations.\", width = \"500px\")\r\n        )\r\n      ),\r\n      tags$div(tags$h4(strong(tags$i(icon(\"filter\")),\"Please select your filters. Filters available include time and day type filters.\"))),\r\n      radioButtons(\"day_filter\", HTML(paste(icon(\"calendar\"), \"Select Day Type filter\")), choices = c(\"Combined\" = \"combined\",\"Weekday\" = \"weekday\",\"Weekend/PH\" = \"weekend_ph\"), selected = c(\"combined\"), inline = T),\r\n      tags$div(tags$h5(strong(tags$i(icon(\"clock\")), \"Select Time Period filter\"))),\r\n      checkboxInput(\"time_filter\",\"Filter by Time Period\", F),\r\n      conditionalPanel(\r\n        condition = \"input.time_filter == true\",\r\n        tags$div(tags$h5(strong(tags$i(icon(\"triangle-exclamation\")), \"For time filters, give in 24h format. For continuation to next day, let time since be greater than time until. Both equal are treated as full (Why would you do that?).\", class = \"red_text\"))),\r\n        radioButtons(\"more_time_filters\", \"Include how many time periods?\", choices = c(\"1\" = \"1\", \"2\" = \"2\", \"3\" = \"3\", \"4\" = \"4\"), selected = c(\"1\"), inline = T),\r\n        tags$div(tags$h5(strong(\"Select Time Period filter 1\", class = \"blue_text\"))),\r\n        sliderInput(\"time_since1\",\"TP1: Since what hour?\", 0, 23, 0, step = 1, animate = F, width = \"200px\"),\r\n        sliderInput(\"time_until1\",\"TP2: Until what hour?\", 0, 23, 0, step = 1, animate = F, width = \"200px\"),\r\n        conditionalPanel(\r\n          condition = \"input.more_time_filters == '2' || input.more_time_filters == '3' || input.more_time_filters == '4'\",\r\n          tags$div(tags$h5(strong(\"Select Time Period filter 2\", class = \"blue_text\"))),\r\n          sliderInput(\"time_since2\", \"TP2: Since what hour?\", 0, 23, 0, step = 1, animate = F, width = \"200px\"),\r\n          sliderInput(\"time_until2\", \"TP2: Until what hour?\", 0, 23, 0, step = 1, animate = F, width = \"200px\")\r\n        ),\r\n        conditionalPanel(\r\n          condition = \"input.more_time_filters == '3' || input.more_time_filters == '4'\",\r\n          tags$div(tags$h5(strong(\"Select Time Period filter 3\", class = \"blue_text\"))),\r\n          sliderInput(\"time_since3\", \"TP3: Since what hour?\", 0, 23, 0, step = 1, animate = F, width = \"200px\"),\r\n          sliderInput(\"time_until3\", \"TP3: Until what hour?\", 0, 23, 0, step = 1, animate = F, width = \"200px\")\r\n        ),\r\n        conditionalPanel(\r\n          condition = \"input.more_time_filters == '4'\",\r\n          tags$div(tags$h5(strong(\"Select Time Period filter 4\", class = \"blue_text\"))),\r\n          sliderInput(\"time_since4\", \"TP4: Since what hour?\", 0, 23, 0, step = 1, animate = F, width = \"200px\"),\r\n          sliderInput(\"time_until4\", \"TP4: Until what hour?\", 0, 23, 0, step = 1, animate = F, width = \"200px\")\r\n        ),\r\n      ),\r\n      conditionalPanel(\r\n        condition = \"input.heatmap_type == 'by_bus_svc' || input.heatmap_type == 'by_mrt_line'\",\r\n        checkboxGroupInput(\"stop_names\", \"Display bus stop/station names in\", choices = c(\"Rows\" = \"row_names\", \"Columns\" = \"column_names\"), selected = c(\"row_names\", \"column_names\"), inline = T),\r\n      ),\r\n      conditionalPanel(\r\n        condition = \"input.heatmap_type == 'by_specific_stops' || input.heatmap_type == 'by_specific_stns' || input.heatmap_type == 'by_specific_stop' || input.heatmap_type == 'by_specific_stn'\",\r\n        checkboxInput(\"stop_names2\", \"Display bus stop/station names in cells\", F),\r\n      ),\r\n      actionButton(\"generate\", \"Generate Table\", width = \"140px\", icon = icon(\"table\")),\r\n      htmlOutput(\"result_conf\")\r\n    ),\r\n    mainPanel(\r\n      imageOutput(\"result_out\", inline = T)\r\n    )\r\n  )\r\n)\r\n\r\nserver <- function(input, output, session) {\r\n  \r\n  options(shiny.maxRequestSize=900*1024^2)\r\n  \r\n  discord_data <- reactive({input$discord_data})\r\n  route1 <- reactive({if (!identical(discord_data()$svc, NULL)) {discord_data()$svc}\r\n    else {if (\"by_bus_svc\" %in% heatmap_type()) {input$svc_in} else if (\"by_mrt_line\" %in% heatmap_type()) {input$mrt_line_in_1}}})\r\n  route2 <- reactive({input$mrt_line_in_2})\r\n  pre_dir1 <- reactive({if (!identical(discord_data()$dir, NULL)) {discord_data()$dir}\r\n    else {if (\"by_bus_svc\" %in% heatmap_type()) {input$dir1_in} else if (\"by_mrt_line\" %in% heatmap_type()) {input$dir2a_in}}})\r\n  pre_dir2 <- reactive({input$dir2b_in})\r\n  svc_half <- reactive({if (!identical(discord_data()$svc_half, NULL)) {discord_data()$svc_half}\r\n    else {input$svc_half_in}})\r\n  sp_ori <- reactive({if (!identical(discord_data()$sp_ori, NULL)) {discord_data()$sp_ori}\r\n    else {if (\"by_specific_stops\" %in% heatmap_type() || \"by_specific_stop\" %in% heatmap_type()) {\r\n      input$ori_stops\r\n    } else if (\"by_specific_stns\" %in% heatmap_type() || \"by_specific_stn\" %in% heatmap_type()) {\r\n      input$ori_stns\r\n    }\r\n    }\r\n  })\r\n  sp_dst <- reactive({if (!identical(discord_data()$sp_dst, NULL)) {discord_data()$sp_dst}\r\n    else {if (\"by_specific_stops\" %in% heatmap_type()) {input$dst_stops} else if (\"by_specific_stns\" %in% heatmap_type()) {input$dst_stns}}})\r\n  heatmap_type <- reactive({if (!identical(discord_data()$type_bool, NULL)) {discord_data()$type_bool}\r\n    else {input$heatmap_type}})\r\n  day_filter <- reactive({if (!identical(discord_data()$day_type, NULL)) {discord_data()$day_type}\r\n    else {input$day_filter}})\r\n  time_filter <- reactive({if (!identical(discord_data()$time_periods, NULL)) {discord_data()$time_period}\r\n    else {input$time_filter}})\r\n  time_periods <- reactive({\r\n    time_since_list <- vector(\"list\", 4)\r\n    time_until_list <- vector(\"list\", 4)\r\n    if (!identical(discord_data()$time_periods, NULL)) {\r\n      for (k in 1:4) {\r\n        time_since_list[[k]] <- input$discord_data[[paste0(\"period\", k)]][[\"time_since\"]]\r\n        time_until_list[[k]]  <- input$discord_data[[paste0(\"period\", k)]][[\"time_until\"]]\r\n      }\r\n    } else {\r\n      for (k in 1:4) {\r\n        time_since_list[[k]] <- input[[paste0(\"time_since\", k)]]\r\n        time_until_list[[k]]  <- input[[paste0(\"time_until\", k)]]\r\n      }\r\n    }\r\n    list(time_since_list = time_since_list, time_until_list = time_until_list)\r\n  })\r\n  display_stop_names <- reactive({list(discord_data()$rows, discord_data()$columns, discord_data()$cells)})\r\n  pre_data1 <- reactiveVal(NULL)\r\n  pre_data2 <- reactiveVal(NULL)\r\n  pre_data3 <- reactiveVal(NULL)\r\n  data_type1 <- reactiveVal(NULL)\r\n  data_type2 <- reactiveVal(NULL)\r\n  data_type3 <- reactiveVal(NULL)\r\n  conf_msg <- reactiveVal(\"\")\r\n  conf_msg2 <- reactiveVal(\"\")\r\n  conf_msg3 <- reactiveVal(\"\")\r\n  result_msg <- reactiveVal(\"\")\r\n  line_cols <- list(\"EWL\" = \"#009E52\", \"NSL\" = \"#EF1C2A\", \"NEL\" = \"#6B3394\", \"CCL\" = \"#FCB02A\", \"DTL\" = \"#00509F\", \"TEL\" = \"#9D5B25\", \"BPLRT\" = \"#748477\", \"SKLRT\" = \"#748477\", \"PGLRT\" = \"#748477\")\r\n  cols = colorRamp2(c(0, 1, 30, 50, 100, 500, 1000, 5000, 10000, 50000, 100000, 500000, 1000000), c(\"gray60\",\"white\",\"white\",\"#A0FFA0\",\"green\", \"#C0FF00\",\"yellow\",\"#FFD200\",\"orange\",\"#FF8000\",\"red\", \"darkred\",\"black\"))\r\n  \r\n  interval2hours <- function(start, end) {\r\n    start <- as.numeric(start)\r\n    end <- as.numeric(end)\r\n    if (start < end) {\r\n      return(start:(end - 1))\r\n    } else if (start > end) {\r\n      # wrap-around: from start to 23 and from 0 up to (end - 1)\r\n      return(c(start:23, if (end > 0) 0:(end - 1) else integer(0)))\r\n    } else {\r\n      # When both are equal, treat as full day.\r\n      return(0:23)\r\n    }\r\n  }\r\n  \r\n  unlist_routes <- function(service) {\r\n    service$routes <- lapply(service$routes, function(route) {\r\n      # Check if all elements in 'route' are atomic.\r\n      if (all(sapply(route, is.atomic))) {\r\n        # Unlist the route, but only one level deep.\r\n        unlist(route, recursive = FALSE, use.names = FALSE)\r\n      }\r\n    })\r\n    service\r\n  }\r\n  \r\n  compound_route <- function(data, source) {\r\n    compound_org <- unique(source$ORIGIN_PT_CODE[grepl(\"/\", source$ORIGIN_PT_CODE)])\r\n    compound_dst <- unique(source$DESTINATION_PT_CODE[grepl(\"/\", source$DESTINATION_PT_CODE)])\r\n    compound_entries <- unique(c(compound_org, compound_dst))\r\n    compound_mapping <- list()\r\n    for (entry in compound_entries) {\r\n      parts <- strsplit(entry, \"/\", fixed = TRUE)[[1]]\r\n      # For each part, store that the compound version is what we want.\r\n      for (part in parts) {\r\n        # In case the same simple code appears in several compounds,\r\n        # you might choose the first occurrence.\r\n        if (!part %in% names(compound_mapping)) {\r\n          compound_mapping[[part]] <- entry\r\n        }\r\n      }\r\n    }\r\n    updated_data <- sapply(data, function(x) {\r\n      if (x %in% names(compound_mapping)) {compound_mapping[[x]]\r\n      } else {x}\r\n    })\r\n    updated_data\r\n  }\r\n  \r\n  get_line_colour <- function(code) {\r\n    # Each code on the left maps to the line colour on the right.\r\n    codes <- c(\r\n      \"^(EW|CG)\" = line_cols[[\"EWL\"]],\r\n      \"^(NS)\"    = line_cols[[\"NSL\"]],\r\n      \"^(NE)\"    = line_cols[[\"NEL\"]],\r\n      \"^(CC|CE)\" = line_cols[[\"CCL\"]],\r\n      \"^(DT)\"    = line_cols[[\"DTL\"]],\r\n      \"^(TE)\"    = line_cols[[\"TEL\"]],\r\n      \"^(BP|SW|SE|PW|PE|STC|PTC)\" = line_cols[[\"BPLRT\"]]\r\n    )\r\n    for (pattern in names(codes)) {\r\n      if (grepl(pattern, code)) {\r\n        return(codes[[pattern]])\r\n      }\r\n    }\r\n    return(\"#000000\")  # Default colour if no code matches.\r\n  }\r\n  \r\n  get_labels <- function(show_both, label_type, route1, route2, stop_names, stop_names2) {\r\n    # Determine which stop table to use\r\n    if (label_type == \"column\") {\r\n      if (\"by_bus_svc\" %in% heatmap_type()) {\r\n        stops <- stop_names[1:(nrow(stop_names)-1), ]\r\n      } else {\r\n        stops <- stop_names[1:nrow(stop_names), ]\r\n      }\r\n    } else if (label_type == \"row\") {\r\n      if (\"by_bus_svc\" %in% heatmap_type()) {\r\n        stops <- stop_names[2:nrow(stop_names), ]\r\n      } else if (route1 == route2) {\r\n        stops <- stop_names[1:nrow(stop_names), ]\r\n      } else {\r\n        stops <- stop_names2[1:nrow(stop_names2), ]\r\n      }\r\n    }\r\n    # Format the label based on whether one or two names are desired.\r\n    # Column 1 are the codes and column 2 are the names.\r\n    if (show_both) {\r\n      if (label_type == \"column\") {\r\n        return(paste(stops[, 1], \"     \", stops[, 2], sep = \"\"))\r\n      } else {\r\n        return(paste(stops[, 2], \"     \", stops[, 1], sep = \"\")) # Swapped for rows.\r\n      }\r\n    } else {\r\n      # Just return column 1 if not showing stop names.\r\n      return(as.character(stops[, 1]))\r\n    }\r\n  }\r\n  \r\n  decimal_to_base <- function(num, base) {\r\n    digits <- c(0:9, LETTERS)\r\n    result <- \"\"\r\n    while (num > 0) {\r\n      remainder <- num %% base\r\n      result <- paste0(digits[remainder + 1], result)\r\n      num <- num %/% base\r\n    }\r\n    if (result == \"\") result <- \"0\"\r\n    return(result)\r\n  }\r\n  \r\n  base_to_decimal <- function(num_str, base) {\r\n    return(as.numeric(strtoi(num_str, base = base)))\r\n  }\r\n  \r\n  datamall_data_types <- function(data_type, data_type2) {\r\n    if (data_type == \"origin_destination\") {\r\n      if (data_type2 == \"bus\") {\r\n        data_type1(\"od_bus\")\r\n      } else if (data_type2 == \"train\") {\r\n        data_type1(\"od_train\")\r\n      }\r\n    } else if (data_type == \"specific_stop\") {\r\n      if (data_type2 == \"bus\") {\r\n        data_type1(\"spec_bus\")\r\n      } else if (data_type2 == \"train\") {\r\n        data_type1(\"spec_train\")\r\n      }\r\n    } else {\r\n      data_type1(NULL)\r\n    }\r\n  }\r\n  \r\n  heatmap_types <- function(type) {\r\n    if (type == \"by_bus_svc\" || type == \"by_specific_stops\") {\r\n      data_type <- \"od_bus\"\r\n    } else if (type == \"by_mrt_line\" || type == \"by_specific_stns\") {\r\n      data_type <- \"od_train\"\r\n    } else if (type == \"by_specific_stop\") {\r\n      data_type <- \"spec_bus\"\r\n    } else if (type == \"by_specific_stn\") {\r\n      data_type <- \"spec_train\"\r\n    }\r\n    return(data_type)\r\n  }\r\n  \r\n  observe({\r\n    if (input$import_select != \"file_upload\") {\r\n      if (input$datamall_data_type == \"origin_destination\") {\r\n        if (input$datamall_data_type2 == \"bus\") {\r\n          updateSelectInput(session, \"heatmap_type\", choices = c(\"By bus service\" = \"by_bus_svc\", \"By specific stops\" = \"by_specific_stops\"))\r\n        } else if (input$datamall_data_type2 == \"train\") {\r\n          updateSelectInput(session, \"heatmap_type\", choices = c(\"By specific MRT/LRT lines\" = \"by_mrt_line\", \"By specific MRT/LRT stations\" = \"by_specific_stns\"))\r\n        }\r\n      } else if (input$datamall_data_type == \"specific_stop\") {\r\n        if (input$datamall_data_type2 == \"bus\") {\r\n          updateSelectInput(session, \"heatmap_type\", choices = c(\"By specific bus stop\" = \"by_specific_stop\"))\r\n        } else if (input$datamall_data_type2 == \"train\") {\r\n          updateSelectInput(session, \"heatmap_type\", choices = c(\"By specific MRT/LRT station\" = \"by_specific_stn\"))\r\n        }\r\n      }\r\n    } else {\r\n      if (!is.null(data_type1())) {\r\n        if (grepl(\"^origin_destination_bus_\", input$data1_in$name)) {\r\n          updateSelectInput(session, \"heatmap_type\", choices = c(\"By bus service\" = \"by_bus_svc\", \"By specific stops\" = \"by_specific_stops\"))\r\n        } else if (grepl(\"^origin_destination_train_\", input$data1_in$name)) {\r\n          updateSelectInput(session, \"heatmap_type\", choices = c(\"By specific MRT/LRT lines\" = \"by_mrt_line\", \"By specific MRT/LRT stations\" = \"by_specific_stns\"))\r\n        } else if (grepl(\"^transport_node_bus_\", input$data1_in$name)) {\r\n          updateSelectInput(session, \"heatmap_type\", choices = c(\"By specific bus stop\" = \"by_specific_stop\"))\r\n        } else if (grepl(\"^transport_node_train_\", input$data1_in$name)) {\r\n          updateSelectInput(session, \"heatmap_type\", choices = c(\"By specific MRT/LRT station\" = \"by_specific_stn\"))\r\n        }\r\n      } else {\r\n        updateSelectInput(session, \"heatmap_type\", choices = c(\"You have not uploaded any Datamall data. Go upload data before you come choosing your heatmap type!\" = \"error\"))\r\n      }\r\n    }\r\n  })\r\n  \r\n  observeEvent(input$data1_in, {\r\n    conf_msg(\"\")\r\n    req(input$data1_in, \"file_upload\" %in% input$import_select)\r\n    if (grepl(\"^origin_destination_bus_\", input$data1_in$name)) {\r\n      data_type1(\"od_bus\")\r\n    } else if (grepl(\"^origin_destination_train_\", input$data1_in$name)) {\r\n      data_type1(\"od_train\")\r\n    } else if (grepl(\"^transport_node_bus_\", input$data1_in$name)) {\r\n      data_type1(\"spec_bus\")\r\n    } else if (grepl(\"^transport_node_train_\", input$data1_in$name)) {\r\n      data_type1(\"spec_train\")\r\n    } else {\r\n      data_type1(NULL)\r\n    }\r\n    pre_data1(read.csv(input$data1_in$datapath, colClasses = c(\"ORIGIN_PT_CODE\" = \"character\", \"DESTINATION_PT_CODE\" = \"character\", \"PT_CODE\" = \"character\")))\r\n    if (!is.null(pre_data1()) && !is.null(data_type1())) {\r\n      conf_msg(paste(\"<span style='color:#00DD00; font-weight:bold;'><i class='fas fa-square-check'><\/i> Datamall \",\r\n                     if (grepl(\"^origin_destination_bus_\", input$data1_in$name)) \"O-D Bus\"\r\n                     else if (grepl(\"^origin_destination_train_\", input$data1_in$name)) \"O-D Train\"\r\n                     else if (grepl(\"^transport_node_bus_\", input$data1_in$name)) \"specific Bus\"\r\n                     else if (grepl(\"^transport_node_train_\", input$data1_in$name)) \"specific Train\",\r\n                     \" CSV upload from local storage successful!<\/span>\"))\r\n    } else {\r\n      conf_msg(\"<span style='color:#BB0000; font-weight:bold;'><i class='fas fa-triangle-exclamation'><\/i> Datamall CSV upload failed. Please check for data corruption or correct file format.<\/span>\")\r\n    }\r\n  })\r\n  \r\n  observeEvent(input$data2_in, {\r\n    conf_msg2(\"\")\r\n    req(input$data2_in, \"file_upload\" %in% input$import_select2)\r\n    if (grepl(\"^services_\", input$data2_in$name)) {\r\n      data_type2(\"bus\")\r\n    } else if (grepl(\"stations.json\", input$data2_in$name)) {\r\n      data_type2(\"train\")\r\n    } else {\r\n      data_type2(NULL)\r\n    }\r\n    uploaded_data2 <- jsonlite::fromJSON(input$data2_in$datapath, simplifyVector = FALSE)\r\n    for (k in seq_along(uploaded_data2)) {\r\n      uploaded_data2[[k]] <- unlist_routes(uploaded_data2[[k]])\r\n    }\r\n    if (!is.null(uploaded_data2[[1]]$routes) && !is.null(data_type2())) {\r\n      pre_data2(uploaded_data2)\r\n      conf_msg2(paste(\"<span style='color:#00DD00; font-weight:bold;'><i class='fas fa-square-check'><\/i>\", if (input$data2_in$name == \"stations.json\") \"MRT/LRT lines JSON\" else \"BusRouter services JSON\", \" upload from local storage successful!<\/span>\"))\r\n    } else {\r\n      conf_msg2(\"<span style='color:#BB0000; font-weight:bold;'><i class='fas fa-triangle-exclamation'><\/i> BusRouter Services JSON upload failed. Please check for data corruption or correct file format.<\/span>\")\r\n    }\r\n  })\r\n  \r\n  observeEvent(input$data3_in, {\r\n    conf_msg3(\"\")\r\n    req(input$data3_in, \"file_upload\" %in% input$import_select2)\r\n    if (grepl(\"^stops_\", input$data3_in$name)) {\r\n      data_type3(\"bus\")\r\n    } else if (grepl(\"station_names.json\", input$data3_in$name)) {\r\n      data_type3(\"train\")\r\n    } else {\r\n      data_type3(NULL)\r\n    }\r\n    uploaded_data3 <- jsonlite::fromJSON(input$data3_in$datapath, simplifyVector = FALSE)\r\n    if ((\"Bt Merah Int\" %in% unlist(uploaded_data3) || \"Pasir Ris\" %in% unlist(uploaded_data3)) && !is.null(data_type3())) {\r\n      pre_data3(uploaded_data3)\r\n      conf_msg3(paste(\"<span style='color:#00DD00; font-weight:bold;'><i class='fas fa-square-check'><\/i>\", if (input$data3_in$name == \"station_names.json\") \"MRT/LRT station names JSON\" else \"BusRouter stops JSON\", \" upload from local storage successful!<\/span>\"))\r\n    } else {\r\n      conf_msg3(\"<span style='color:#BB0000; font-weight:bold;'><i class='fas fa-triangle-exclamation'><\/i> BusRouter Stops JSON upload failed. Please check for data corruption or correct file format.<\/span>\")\r\n    }\r\n  })\r\n  \r\n  datamall_params <- eventReactive(input$import_datamall, {\r\n    if (input$use_own_key) {\r\n      account_key <- input$own_key\r\n    } else {\r\n      account_key <- input$default_key\r\n    }\r\n    list(\r\n      account_key = account_key\r\n    )\r\n  })\r\n  \r\n  observeEvent(datamall_params(), {\r\n    datamall_data_types(input$datamall_data_type, input$datamall_data_type2)\r\n    session$sendCustomMessage(\"fetch_datamall\", datamall_params())\r\n  })\r\n  \r\n  observeEvent(input$import_busrouter, {\r\n    conf_msg3(\"\")\r\n    data_type2(\"bus\")\r\n    data_type3(\"bus\")\r\n    session$sendCustomMessage(\"fetch_busrouter\", \"\")\r\n  })\r\n  \r\n  observeEvent(input$import_repository, {\r\n    conf_msg3(\"\")\r\n    datamall_data_types(input$datamall_data_type, input$datamall_data_type2)\r\n    session$sendCustomMessage(\"fetch_drive_datamall\", \"\")\r\n  })\r\n  \r\n  observeEvent(input$import_repository2, {\r\n    conf_msg3(\"\")\r\n    if (input$json_data_type == \"bus\") {\r\n      data_type2(\"bus\")\r\n      data_type3(\"bus\")\r\n    } else {\r\n      data_type2(\"train\")\r\n      data_type3(\"train\")\r\n    }\r\n    session$sendCustomMessage(\"fetch_drive_busrouter\", \"\")\r\n  })\r\n  \r\n  observeEvent(input$csv_data_in$data1, {\r\n    pre_data1(read.csv(text = input$csv_data_in$data1, colClasses = c(\"ORIGIN_PT_CODE\" = \"character\", \"DESTINATION_PT_CODE\" = \"character\")))\r\n  })\r\n  \r\n  observeEvent(input$discord_data$data1, {\r\n    pre_data1(read.csv(text = input$discord_data$data1, colClasses = c(\"ORIGIN_PT_CODE\" = \"character\", \"DESTINATION_PT_CODE\" = \"character\")))\r\n  })\r\n  \r\n  observeEvent(input$json_data_in, {\r\n    busrouter_data <- fromJSON(input$json_data_in)\r\n    pre_data2(busrouter_data$data2)\r\n    pre_data3(busrouter_data$data3)\r\n  })\r\n  \r\n  result <- eventReactive(list(input$generate, discord_data()), {\r\n    if (identical(discord_data(), NULL)) {\r\n      req(input$generate)\r\n    } else {\r\n      req(!is.null(discord_data()))\r\n    }\r\n    if (is.null(data_type1()) || is.null(data_type2()) || is.null(data_type3())) {\r\n      tryCatch({\r\n        result_msg(paste0(\"<span style='color:#BB0000; font-weight:bold;'><i class='fas fa-triangle-exclamation'><\/i> You have not uploaded \", if (is.null(data_type1())) \"Datamall origin-destination or transport-node CSVs\" else if (is.null(data_type2())) \", BusRouter/Repository services/stations JSON\" else if (is.null(data_type3())) \"BusRouter/Repository stops/station_names JSON\", \". What do you wanna see?!<\/span>\"))\r\n        stop(\"Required data not defined.\")\r\n      }, error = function(e) {\r\n        print(e$message)\r\n        stop()\r\n      })\r\n    }\r\n    if (grepl(\"bus\", data_type1()) != grepl(\"bus\", data_type2()) || grepl(\"bus\", data_type2()) != grepl(\"bus\", data_type3())) {\r\n      tryCatch({\r\n        result_msg(paste0(\"<span style='color:#BB0000; font-weight:bold;'><i class='fas fa-triangle-exclamation'><\/i> Your uploaded CSV is of type '\", data_type1(), \"', uploaded JSON are of types '\", data_type2(), \"', '\", data_type3(), \"', make up your mind!<\/span>\"))\r\n        stop(\"Data type mismatch.\")\r\n      }, error = function(e) {\r\n        print(e$message)\r\n        stop()\r\n      })\r\n    }\r\n    heatmap_data_type <- heatmap_types(heatmap_type())\r\n    if (data_type1() != heatmap_data_type) {\r\n      tryCatch({\r\n        result_msg(paste0(\"<span style='color:#BB0000; font-weight:bold;'><i class='fas fa-triangle-exclamation'><\/i> You uploaded some \", data_type1(), \" data, but you selected a heatmap type that needs \", heatmap_data_type, \" data. Make up your mind!<\/span>\"))\r\n        stop(\"Selection of heatmap type not equal to type of uploaded data.\")\r\n      }, error = function(e) {\r\n        print(e$message)\r\n        stop()\r\n      })\r\n    }\r\n    data1 <- pre_data1()\r\n    data2 <- pre_data2()\r\n    data3 <- pre_data3()\r\n    route1 <- as.character(route1())\r\n    route2 <- as.character(route2())\r\n    dir1 <- as.numeric(pre_dir1())\r\n    dir2 <- as.numeric(pre_dir2())\r\n    if (identical(day_filter(), \"combined\")) {\r\n      day_type <- \"Combined\"\r\n    } else if (identical(day_filter(), \"weekday\")) {\r\n      day_type <- \"Weekday\"\r\n    } else if (identical(day_filter(), \"weekend_ph\")) {\r\n      day_type <- \"Weekend/PH\"\r\n    }\r\n    filter_day_type <- if (\"weekday\" %in% day_filter()) {\r\n      quo(DAY_TYPE == \"WEEKDAY\")\r\n    } else if (\"weekend_ph\" %in% day_filter()) {\r\n      quo(DAY_TYPE == \"WEEKENDS/HOLIDAY\")\r\n    } else {\r\n      quo(TRUE)\r\n    }\r\n    if (identical(time_filter(), TRUE)) {\r\n      time_period <- NULL\r\n      valid_hours <- NULL\r\n      if (!identical(discord_data()$time_periods, NULL)) {\r\n        defined_periods <- discord_data()$time_periods\r\n        for (name in names(defined_periods)) {\r\n          period_start <- defined_periods[[name]][[\"time_since\"]]\r\n          period_end   <- defined_periods[[name]][[\"time_until\"]]\r\n          period_hours <- interval2hours(period_start, period_end)\r\n          valid_hours <- sort(unique(c(valid_hours, period_hours)))\r\n          if (is.null(time_period)) {\r\n            time_period <- paste0(\"From \", if (nchar(period_start) == 2) period_start else paste0(\"0\", period_start), \":00 to \", if (nchar(period_end) == 2) period_end else paste0(\"0\", period_end), \":00\")\r\n          } else {\r\n            extra_period <- paste0(if (nchar(period_start) == 2) period_start else paste0(\"0\", period_start), \":00 to \", if (nchar(period_end) == 2) period_end else paste0(\"0\", period_end), \":00\")\r\n            time_period <- paste0(time_period, \", \", extra_period)\r\n          }\r\n        }\r\n      } else {\r\n        total_periods <- as.numeric(input$more_time_filters)\r\n        for (i in 1:total_periods) {\r\n          period_start <- time_periods()$time_since_list[[i]]\r\n          period_end <- time_periods()$time_until_list[[i]]\r\n          period_hours <- interval2hours(period_start, period_end)\r\n          valid_hours <- sort(unique(c(valid_hours, period_hours)))\r\n          if (i == 1) {\r\n            time_period <- paste0(\"From \", if (nchar(period_start) == 2) period_start else paste0(\"0\", period_start), \":00 to \", if (nchar(period_end) == 2) period_end else paste0(\"0\", period_end), \":00\")\r\n          } else {\r\n            extra_period <- paste0(if (nchar(period_start) == 2) period_start else paste0(\"0\", period_start), \":00 to \", if (nchar(period_end) == 2) period_end else paste0(\"0\", period_end), \":00\")\r\n            time_period <- paste0(time_period, \", \", extra_period)\r\n          }\r\n        }\r\n      }\r\n      if (length(valid_hours) == 24) {time_period <- \"Full Day\"}\r\n      filter_time_period <- quo(TIME_PER_HOUR %in% valid_hours)\r\n    } else {\r\n      filter_time_period <- quo(TRUE)\r\n      time_period <- \"Full Day\"\r\n    }\r\n    if (\"by_bus_svc\" %in% heatmap_type() || \"by_mrt_line\" %in% heatmap_type()) {\r\n      stop_cur <- data2[[route1]]$routes[[dir1]]\r\n      if (is.null(stop_cur)) {\r\n        tryCatch({\r\n          if (heatmap_data_type == \"od_bus\" || heatmap_data_type == \"spec_bus\") {\r\n            result_msg(paste0(\"<span style='color:#BB0000; font-weight:bold;'><i class='fas fa-triangle-exclamation'><\/i> Invalid bus service. Is your bus service withdrawn?<\/span>\"))\r\n            stop(\"Invalid bus service.\")\r\n          } else {\r\n            result_msg(paste0(\"<span style='color:#BB0000; font-weight:bold;'><i class='fas fa-triangle-exclamation'><\/i> Invalid MRT/LRT line. Did you crayon your own?<\/span>\"))\r\n            stop(\"Invalid MRT/LRT line.\")\r\n          }\r\n        }, error = function(e) {\r\n          print(e$message)\r\n          stop()\r\n        })\r\n      }\r\n      if (\"by_mrt_line\" %in% heatmap_type()) {\r\n        stop_cur2 <- data2[[route2]]$routes[[dir2]]\r\n        if (is.null(stop_cur2)) {\r\n          tryCatch({\r\n            result_msg(paste0(\"<span style='color:#BB0000; font-weight:bold;'><i class='fas fa-triangle-exclamation'><\/i> Invalid MRT/LRT line. Did you crayon your own?<\/span>\"))\r\n            stop(\"Invalid MRT/LRT line.\")\r\n          }, error = function(e) {\r\n            print(e$message)\r\n            stop()\r\n          })\r\n        }\r\n      }\r\n      if (\"by_bus_svc\" %in% heatmap_type()) {\r\n        origin <- data3[[(stop_cur[1])]][[3]]\r\n        terminus <- data3[[(stop_cur[length(stop_cur)])]][[3]]\r\n      } else {\r\n        terminus <- data3[[(stop_cur[length(stop_cur)])]][[1]]\r\n        terminus2 <- data3[[(stop_cur2[length(stop_cur2)])]][[1]]\r\n      }\r\n      is_2way <- length(data2[[route1]]$routes)\r\n      stop_half <- round(length(stop_cur)/2)\r\n      if (\"by_bus_svc\" %in% heatmap_type()) {\r\n        stop_half_opt = svc_half()\r\n        if (is_2way == 2){\r\n          if (identical(stop_half_opt, \"1st half\")){\r\n            stop_cur1a <- stop_cur[1:(stop_half+3)]\r\n            dir_graph <- paste0(\"Direction \",dir1,\"\\n(\",stop_half_opt,\")\")\r\n          } else if (identical(stop_half_opt, \"2nd half\")) {\r\n            stop_cur1a <- stop_cur[(stop_half-3):length(stop_cur)]\r\n            dir_graph <- paste0(\"Direction \",dir1,\"\\n(\",stop_half_opt,\")\")\r\n          } else {\r\n            stop_cur1a <- stop_cur\r\n            dir_graph <- paste(\"Direction \",dir1)\r\n          } \r\n        } else {\r\n          if (identical(stop_half_opt, \"1st half\")){\r\n            stop_cur1a <- stop_cur[1:(3+stop_half)]\r\n            dir_graph <- paste0(\"Direction 1\\n(\",stop_half_opt,\")\")\r\n          } else if (identical(stop_half_opt, \"2nd half\")) {\r\n            stop_cur1a <- stop_cur[(stop_half-2):length(stop_cur)]\r\n            dir_graph <- paste0(\"Direction 1\\n(\",stop_half_opt,\")\")\r\n          } else {\r\n            stop_cur1a <- stop_cur\r\n            if (origin == terminus) {dir_graph <- \"Loop Svc\"} else {dir_graph <- \"Direction 1\"}\r\n          }}\r\n      } else {\r\n        stop_cur1a <- stop_cur\r\n        dir_grah <- paste(\"dir\",dir1)\r\n        dir_graph2 <- paste(\"dir\",dir2)\r\n      }\r\n      V <- length(stop_cur1a)\r\n      stop_names <- data.frame(as.character(c(stop_cur1a)),c(1:V))\r\n      if (\"by_bus_svc\" %in% heatmap_type()) {\r\n        for (j in 1:V){\r\n          stop_names[j,2] <- data3[[(stop_cur1a[j])]][[3]]\r\n        }\r\n      } else {\r\n        for (j in 1:V){\r\n          stop_names[j,2] <- data3[[(stop_cur1a[j])]][[1]]\r\n        }\r\n      }\r\n      if (\"by_mrt_line\" %in% heatmap_type() && route1 != route2) {\r\n        W <- length(stop_cur2)\r\n        stop_names2 <- data.frame(as.character(c(stop_cur2)),c(1:W))\r\n        for (j in 1:W){\r\n          stop_names2[j,2] <- data3[[(stop_cur2[j])]][[1]]\r\n        }\r\n      } else {\r\n        stop_names2 <- NULL\r\n      }\r\n      stop_cur1a <- compound_route(stop_cur1a, data1)\r\n      if (\"by_mrt_line\" %in% heatmap_type()) {\r\n        stop_cur2 <- compound_route(stop_cur2, data1)\r\n      }\r\n      stop_cur0a <- data.frame(org = 1:V, ORIGIN_PT_CODE = stop_cur1a)\r\n      if (\"by_bus_svc\" %in% heatmap_type() || route1 == route2) {\r\n        stop_cur0b <- data.frame(dst = 1:V, DESTINATION_PT_CODE = stop_cur1a)\r\n      } else {\r\n        stop_cur0b <- data.frame(dst = 1:W, DESTINATION_PT_CODE = stop_cur2)\r\n      }\r\n      dataod1 <- data1 %>% {if (\"by_bus_svc\" %in% heatmap_type() || route1 == route2) {\r\n        filter(., ORIGIN_PT_CODE %in% stop_cur1a | is.na(ORIGIN_PT_CODE),\r\n               DESTINATION_PT_CODE %in% stop_cur1a | is.na(DESTINATION_PT_CODE),\r\n               !!filter_day_type, !!filter_time_period) \r\n      } else {\r\n        filter(., ORIGIN_PT_CODE %in% stop_cur1a | is.na(ORIGIN_PT_CODE),\r\n               DESTINATION_PT_CODE %in% stop_cur2 | is.na(DESTINATION_PT_CODE),\r\n               !!filter_day_type, !!filter_time_period) \r\n      }} %>%  \r\n        group_by(ORIGIN_PT_CODE, DESTINATION_PT_CODE) %>%\r\n        summarise(total = sum(TOTAL_TRIPS, na.rm = TRUE), .groups = \"drop\")\r\n      missing_org <- setdiff(stop_cur1a, unique(dataod1$ORIGIN_PT_CODE)) # Check for missing origin stops\r\n      if (length(missing_org) > 0) {\r\n        extra_rows <- tibble(ORIGIN_PT_CODE = unique(missing_org), DESTINATION_PT_CODE = NA, total = 0)  \r\n        dataod1 <- bind_rows(dataod1, extra_rows) %>%\r\n          distinct(ORIGIN_PT_CODE, DESTINATION_PT_CODE, .keep_all = TRUE)  # Ensure uniqueness\r\n      }\r\n      if (\"by_bus_svc\" %in% heatmap_type() || route1 == route2) {\r\n        missing_dst <- setdiff(stop_cur1a, unique(dataod1$DESTINATION_PT_CODE)) # Check for missing destination stops\r\n        if (length(missing_dst) > 0) {\r\n          extra_rows <- tibble(ORIGIN_PT_CODE = missing_dst, DESTINATION_PT_CODE = missing_dst, total = 0)  # Ensure uniqueness\r\n          dataod1 <- bind_rows(dataod1, extra_rows) %>%\r\n            filter(DESTINATION_PT_CODE %in% stop_cur1a)  # Ensure proper alignment\r\n        }\r\n      } else {\r\n        missing_dst <- setdiff(stop_cur2, unique(dataod1$DESTINATION_PT_CODE)) # Check for missing destination stops\r\n        if (length(missing_dst) > 0) {\r\n          extra_rows <- tibble(ORIGIN_PT_CODE = missing_dst, DESTINATION_PT_CODE = missing_dst, total = 0)  # Ensure uniqueness\r\n          dataod1 <- bind_rows(dataod1, extra_rows) %>%\r\n            filter(DESTINATION_PT_CODE %in% stop_cur2)  # Ensure proper alignment\r\n        }\r\n      }\r\n      # Creates a table to note down the order of bus stops along a bus service or MRT line for each O-D pair\r\n      dataod1a <- full_join(dataod1, stop_cur0a, by=\"ORIGIN_PT_CODE\")\r\n      dataod1a <- full_join(dataod1a, stop_cur0b, by=\"DESTINATION_PT_CODE\")\r\n      dataod1a$total <- as.numeric(dataod1a$total) # Convert demand to numeric form\r\n      # Groups into a table denoting order of bus stops/MRT stations and the demand\r\n      dataod1b <- dataod1a[,c(5,4,3)]\r\n      # Converts to O-D matrix form.\r\n      dataod1c <- dataod1b %>%\r\n        spread(key = org, value = total, fill = NA)\r\n      dataod1c[is.na(dataod1c)] <- 0 # Converts N.A. to 0 demand\r\n      dataod1c <- dataod1c %>%\r\n        filter(dst != 0)  # Keeps all valid rows, removes the incorrect one\r\n      # For column names, only take away 1st destination and final origin stop if of type\r\n      # \"by_bus_svc\" or if both MRT lines are the same\r\n      if (\"by_bus_svc\" %in% heatmap_type()) {\r\n        stop_cur1b <- stop_cur1a[1:V-1]\r\n        stop_cur1c <- stop_cur1a[2:V]\r\n      } else {\r\n        if (route1 == route2) {\r\n          stop_cur1b <- stop_cur1a[1:V]\r\n          stop_cur1c <- stop_cur1a[1:V]\r\n        } else {\r\n          stop_cur1b <- stop_cur1a[1:V]\r\n          stop_cur1c <- stop_cur2[1:W]\r\n        }\r\n      }\r\n      dataod1c <- as.matrix(dataod1c) # To matrix\r\n      # Removes 1st col which is descriptor \r\n      dataod1c <- dataod1c[,-1]\r\n      # Removes only the 1st row and last col if of type \"by_bus_svc\"\r\n      if (\"by_bus_svc\" %in% heatmap_type()) {\r\n        if (ncol(dataod1c)!=(V-1)){\r\n          dataod1c <- dataod1c[,-ncol(dataod1c)]\r\n        }\r\n        if (nrow(dataod1c)!=(V-1)){\r\n          dataod1c <- dataod1c[-1,]\r\n        }\r\n      }\r\n      # Insert column/row names used for ordering\r\n      colnames(dataod1c) <- paste(stop_cur1b)\r\n      rownames(dataod1c) <- paste(stop_cur1c)\r\n      if (\"by_bus_svc\" %in% heatmap_type() || route1 == route2) {\r\n        max_length <- 2 * max(nchar(stop_names[,2]))\r\n      } else {\r\n        max_length <- 2 * max(nchar(stop_names2[,2]))\r\n      }\r\n      # Row and column names\r\n      stop_names_in_column <- (\"column_names\" %in% input$stop_names || display_stop_names()$columns == TRUE)\r\n      column_labels <- get_labels(stop_names_in_column, \"column\", route1, route2, stop_names, stop_names2)\r\n      stop_names_in_row <- (\"row_names\" %in% input$stop_names || display_stop_names()$rows == TRUE)\r\n      row_labels <- get_labels(stop_names_in_row, \"row\", route1, route2, stop_names, stop_names2)\r\n      # Heatmap legend names\r\n      lgd_name1 <- if (\"by_bus_svc\" %in% heatmap_type()) {\r\n        paste(\"O-D matrix (en-route)\\n\",data1$YEAR_MONTH[[1]],\"\\n\",day_type,\" Demand\\n\\nService \",route1,\"\\n\",dir_graph,\"\\n\",terminus,\" Bound\\n\",sep = \"\")\r\n      } else if (route1 == route2) {\r\n        paste(\"O-D matrix (en-route)\\n\",data1$YEAR_MONTH[[1]],\"\\n\",day_type,\" Demand\\n\\n\",route1,\" dir \",dir1,\" as origin\\nand destinatn\\n\",terminus,\" Bound\\n\",sep = \"\")\r\n      } else {\r\n        paste(\"O-D matrix (en-route)\\n\",data1$YEAR_MONTH[[1]],\"\\n\",day_type,\" Demand\\n\\n\",route1,\" dir \",dir1,\" as origin\\n\",route2,\" dir \",dir2,\" as destinatn\\n\",route1,\" \",terminus,\" Bound\\n\",route2,\" \",terminus2,\" Bound\\n\",sep = \"\")\r\n      }\r\n      col_title1 <- if (\"by_bus_svc\" %in% heatmap_type()) {\r\n        paste0(time_period,\"\\nOrigin Bus Stops\")\r\n      } else {\r\n        paste0(time_period,\"\\n\",route1,\" dir \",dir1,\" as origin line\")\r\n      }\r\n      row_title1 <- if (\"by_bus_svc\" %in% heatmap_type()) {\r\n        paste(\"Destination Bus Stops\")\r\n      } else {\r\n        paste(route2,\" dir \",dir2,\"as destination line\")\r\n      }\r\n      # Coloured text for lines\r\n      line_col1a <- if (\"by_mrt_line\" %in% heatmap_type()) {line_cols[[route1]]} else {\"#000000\"}\r\n      line_col1b <- if (\"by_mrt_line\" %in% heatmap_type()) {line_cols[[route2]]} else {\"#000000\"}\r\n      # Heatmap size\r\n      img_dims <- list(width = 39 * ncol(dataod1c) + 320, height = 22 * nrow(dataod1c) + 240)\r\n      # Heatmap config\r\n      img <- Heatmap(dataod1c,\r\n        name = lgd_name1,\r\n        show_column_dend = FALSE,\r\n       show_row_dend = FALSE,\r\n       row_dend_reorder = FALSE,\r\n       column_dend_reorder = FALSE,\r\n       column_title = col_title1,\r\n       column_title_side = \"top\",\r\n       row_title = row_title1,\r\n       row_names_side = \"left\",\r\n       column_names_side = \"top\",\r\n       column_names_rot = 40,\r\n       column_labels = column_labels,\r\n       row_labels = row_labels,\r\n       col = cols,\r\n       na_col = \"gray60\",\r\n       column_gap = unit(2, \"mm\"),\r\n       cluster_rows = FALSE,\r\n       cluster_columns = FALSE,\r\n       row_order = stop_cur1c,\r\n       column_order = stop_cur1b, \r\n       row_names_gp = gpar(fontsize = pmin(ncol(dataod1c) / 3 + 9, 15), col = line_col1b, just = \"right\"),\r\n       column_names_gp = gpar(fontsize = pmin(ncol(dataod1c) / 3 + 9, 15), col = line_col1a),\r\n       row_title_gp = gpar(fontsize = pmin(ncol(dataod1c) / 3 + 12, 25), col = line_col1b, just = \"left\"),\r\n       column_title_gp = gpar(fontsize = pmin(ncol(dataod1c) / 3 + 12, 25), col = line_col1a),\r\n       row_names_max_width = unit(max_length, \"cm\"),\r\n       column_names_max_height = unit(max_length, \"cm\"),\r\n       heatmap_legend_param = list(labels_gp = gpar(fontsize = pmin(ncol(dataod1c) / 3 + 9, 18)), legend_height = unit(pmin(nrow(dataod1c) / 4 + 1, 8), \"cm\"), at = c(0, 100, 500, 1000, 5000, 10000, 50000, 100000, 500000, 1000000), legend_width = unit(2, \"cm\"), color_bar = \"continuous\", title_gp = gpar(fontsize = pmin(ncol(dataod1c) / 3 + 9, 18), fontface = 'bold'), break_dist = 1),\r\n       cell_fun = function(j, i, x, y, width, height, fill) {\r\n         if (dataod1c[i, j] > 100000) {\r\n           grid.text(sprintf(\"%.0f\", dataod1c[i, j]), x, y, gp = gpar(fontsize = 12, col = \"white\"))\r\n         } else if (dataod1c[i, j] > 60000) {\r\n           grid.text(sprintf(\"%.0f\", dataod1c[i, j]), x, y, gp = gpar(fontsize = 13, col = \"white\"))\r\n         } else if(dataod1c[i, j] > 10000){\r\n           grid.text(sprintf(\"%.0f\", dataod1c[i, j]), x, y, gp = gpar(fontsize = 13, col = \"black\"))\r\n         } else if (dataod1c[i, j] > 5000) {\r\n           grid.text(sprintf(\"%.0f\", dataod1c[i, j]), x, y, gp = gpar(fontsize = 14, col = \"black\"))\r\n         } else if(dataod1c[i, j] > 29){\r\n           grid.text(sprintf(\"%.0f\", dataod1c[i, j]), x, y, gp = gpar(fontsize = 14))\r\n         }\r\n       },\r\n       rect_gp = gpar(col = \"black\", lwd = 0.2))\r\n    } else {\r\n      ori_stops <- str_split(sp_ori(), \",\")\r\n      l_ori <- length(ori_stops[[1]])\r\n      if (heatmap_type() == \"by_specific_stops\" || heatmap_type() == \"by_specific_stns\") {\r\n        dst_stops <- str_split(sp_dst(), \",\")\r\n        l_dst <- length(dst_stops[[1]])\r\n        if (l_ori != l_dst) {\r\n          tryCatch({\r\n            result_msg(paste0(\"<span style='color:#BB0000; font-weight:bold;'><i class='fas fa-triangle-exclamation'><\/i> The lengths of your origin bus stops/stations and destination bus stops/stations do not match.<\/span>\"))\r\n            stop(\"Length of origin stops/stations not equal to length of destination stops/stations.\")\r\n          }, error = function(e) {\r\n            print(e$message)\r\n            stop()\r\n          })\r\n        }\r\n      }\r\n      dataod2 <- data.frame(c(1:l_ori), c(1:l_ori), c(1:l_ori))\r\n      dataod2a <- data.frame(c(1:l_ori), c(1:l_ori))\r\n      colnames(dataod2) <- c(\"ori\", \"dst\", \"dmd\")\r\n      colnames(dataod2a) <- c(\"ori_name\", \"dst_name\")\r\n      for (t in 1:l_ori) {\r\n        ori_stop <- trimws(ori_stops[[1]][[t]])\r\n        ori_stop2 <- compound_route(ori_stop, data1)\r\n        dataod2[t, 1] <- ori_stop2\r\n        if (heatmap_type() == \"by_specific_stops\" || heatmap_type() == \"by_specific_stns\") {\r\n          dst_stop <- trimws(dst_stops[[1]][[t]])\r\n          dst_stop2 <- compound_route(dst_stop, data1)\r\n          dataod2[t, 2] <- dst_stop2\r\n          valid_stops <- nrow(filter(data1,\r\n            ORIGIN_PT_CODE %in% dataod2[t, 1] | is.na(ORIGIN_PT_CODE),\r\n            DESTINATION_PT_CODE %in% dataod2[t, 2] | is.na(DESTINATION_PT_CODE),\r\n            !!filter_day_type, !!filter_time_period))\r\n        } else {\r\n          valid_stops <- nrow(filter(data1,\r\n            PT_CODE %in% dataod2[t, 1] | is.na(PT_CODE),\r\n            !!filter_day_type, !!filter_time_period))\r\n        }\r\n        if (valid_stops == 0) {\r\n          tryCatch({\r\n            result_msg(paste0(\"<span style='color:#BB0000; font-weight:bold;'><i class='fas fa-triangle-exclamation'><\/i> Invalid bus stop / MRT/LRT station code(s) detected!\", if (heatmap_type() == \"by_specific_stops\" || heatmap_type() == \"by_specific_stns\") \" Check your codes to see if it's a proper O-D pair, or there's absolutely no one going from A to B.<\/span>\"))\r\n            stop(\"Invalid stop codes\", if (heatmap_type() == \"by_specific_stops\" || heatmap_type() == \"by_specific_stns\") \" or no demand.\" else \".\")\r\n          }, error = function(e) {\r\n            print(e$message)\r\n            stop()\r\n          })\r\n        }\r\n        if (heatmap_type() == \"by_specific_stops\" || heatmap_type() == \"by_specific_stns\") {\r\n          dataod2[t, 3] <- data1 %>%\r\n            filter(., ORIGIN_PT_CODE == dataod2[t, 1],\r\n              DESTINATION_PT_CODE == dataod2[t, 2],\r\n              !!filter_day_type,\r\n              !!filter_time_period) %>%\r\n            summarise(Total = sum(TOTAL_TRIPS)) %>%\r\n            pull(Total) %>%\r\n            as.numeric()\r\n        } else {\r\n          dataod2[t, 2] <- data1 %>%\r\n            filter(., PT_CODE == dataod2[t, 1],\r\n              !!filter_day_type,\r\n              !!filter_time_period) %>%\r\n            summarise(tap_ins = sum(TOTAL_TAP_IN_VOLUME)) %>%\r\n            pull(tap_ins) %>%\r\n            as.numeric()\r\n          dataod2[t, 3] <- data1 %>%\r\n            filter(., PT_CODE == dataod2[t, 1],\r\n              !!filter_day_type,\r\n              !!filter_time_period) %>%\r\n            summarise(tap_outs = sum(TOTAL_TAP_OUT_VOLUME)) %>%\r\n            pull(tap_outs) %>%\r\n            as.numeric()\r\n        }\r\n        if (\"row_names\" %in% input$stop_names || display_stop_names()$cells == TRUE) {\r\n          if (\"by_specific_stops\" %in% heatmap_type()) {\r\n            dataod2a[t, 1] <- data3[[as.character(ori_stop)]][[3]]\r\n            dataod2a[t, 2] <- data3[[as.character(dst_stop)]][[3]]\r\n          } else if (\"by_specific_stns\" %in% heatmap_type()) {\r\n            dataod2a[t, 1] <- data3[[as.character(ori_stop)]][[1]]\r\n            dataod2a[t, 2] <- data3[[as.character(dst_stop)]][[1]]\r\n          } else if (\"by_specific_stop\" %in% heatmap_type()) {\r\n            dataod2a[t, 1] <- data3[[as.character(ori_stop)]][[3]]\r\n          } else if (\"by_specific_stn\" %in% heatmap_type()) {\r\n            dataod2a[t, 1] <- data3[[as.character(ori_stop)]][[1]]\r\n          }\r\n        }\r\n        dataod2[t, 1] <- ori_stop\r\n        if (\"by_specific_stops\" %in% heatmap_type() || \"by_specific_stns\" %in% heatmap_type()) {\r\n          dataod2[t, 2] <- dst_stop\r\n        }\r\n      }\r\n      # To base10 from base36, allowing station codes to be stored as numbers.\r\n      if (\"by_specific_stops\" %in% heatmap_type() || \"by_specific_stns\" %in% heatmap_type()) {\r\n        # The first 2 columns to store origin stops and destination stops.\r\n        for (j in 1:2) {\r\n          dataod2[,j] <- base_to_decimal(dataod2[,j],36)\r\n        }\r\n      } else {\r\n        # The first column to store specific stops.\r\n        dataod2[,1] <- base_to_decimal(dataod2[,1],36)\r\n      }\r\n      dataod2 <- as.matrix(dataod2)\r\n      dataod2a <- as.matrix(dataod2a)\r\n      img_dims <- list(width = 520, height = 24 * nrow(dataod2) + 90)\r\n      column_title <- if (\"by_specific_stops\" %in% heatmap_type() || \"by_specific_stns\" %in% heatmap_type()) {\r\n          \"O-D Matrix for specific stops/stations\"} else {\r\n          \"Tap ins and outs for specific stops/stations\"\r\n        }\r\n      column_labels <- if (\"by_specific_stops\" %in% heatmap_type() || \"by_specific_stns\" %in% heatmap_type()) {\r\n          c(\"Origin\", \"Destination\", \"Demand\")} else {\r\n          c(\"Stop\", \"Tap ins\", \"Tap outs\")\r\n        }\r\n      img <- Heatmap(dataod2,\r\n        name = paste(day_type, \"Demand,\", time_period),\r\n        show_column_dend = FALSE,\r\n        show_row_dend = FALSE,\r\n        row_dend_reorder = FALSE,\r\n        column_dend_reorder = FALSE,\r\n        column_title = column_title,\r\n        column_title_side = \"top\",\r\n        column_names_side = \"top\",\r\n        column_names_rot = 0,\r\n        column_names_centered = TRUE,\r\n        column_labels = column_labels,\r\n        col = cols,\r\n        na_col = \"gray60\",\r\n        column_gap = unit(2, \"mm\"),\r\n        cluster_rows = FALSE,\r\n        cluster_columns = FALSE,\r\n        column_names_gp = gpar(fontsize = 15),\r\n        column_title_gp = gpar(fontsize = 25),\r\n        heatmap_legend_param = list(labels_gp = gpar(fontsize = 12), legend_width = unit(10, \"cm\"), legend_direction = \"horizontal\", at = c(0, 100, 500, 1000, 5000, 10000, 50000, 100000, 500000, 1000000), legend_width = unit(2, \"cm\"), color_bar = \"continuous\", break_dist = 1, title_position = \"topcenter\", heatmap_legend_side = \"top\", title_gp = gpar(fontsize = 12, fontface = \"bold\")),\r\n        cell_fun = function(j, i, x, y, width, height, fill) {\r\n          if (\"by_specific_stops\" %in% heatmap_type() || \"by_specific_stns\" %in% heatmap_type()) {\r\n            # Rows 1 and 2 are not coloured.\r\n            if(j %in% c(1, 2)) {\r\n              # Draw a white background covering the cell.\r\n              grid.rect(\r\n                x = x, y = y, width = width, height = height,\r\n                gp = gpar(fill = \"white\", col = \"black\", lwd = 0.2)\r\n              )\r\n              # From base10 to base36, back to station/stop codes.\r\n              code <- decimal_to_base(dataod2[i,j],36)\r\n              if (isTRUE(input$stop_names2) || isTRUE(display_stop_names()$cells)) {\r\n                grid.text(sprintf(\"%s\\n%s\", code, dataod2a[i, j]), x, y, gp = gpar(fontsize = 11, col = get_line_colour(code)))\r\n              } else {\r\n                grid.text(sprintf(\"%s\", code), x, y, gp = gpar(fontsize = 15, col = get_line_colour(code)))\r\n              }\r\n            }\r\n            if (j==3) {\r\n              grid.rect(\r\n                x = x, y = y, width = width, height = height,\r\n                gp = gpar(fill = fill, col = NA)\r\n              )\r\n            if(dataod2[i, j] > 60000){\r\n              grid.text(sprintf(\"%.0f\", dataod2[i, j]), x, y, gp = gpar(fontsize = 15, col = \"white\"))\r\n            }\r\n            else if(dataod2[i, j] >= 0){\r\n              grid.text(sprintf(\"%.0f\", dataod2[i, j]), x, y, gp = gpar(fontsize = 15))\r\n            }\r\n          }\r\n        } else {\r\n          # Row 1 is not coloured.\r\n          if(j==1) {\r\n            # Draw a white background covering the cell.\r\n            grid.rect(\r\n              x = x, y = y, width = width, height = height,\r\n              gp = gpar(fill = \"white\", col = \"black\", lwd = 0.2)\r\n            )\r\n            # From base10 to base36, back to station/stop codes.\r\n            code <- decimal_to_base(dataod2[i,j],36)\r\n            if (isTRUE(input$stop_names2) || isTRUE(display_stop_names()$cells)) {\r\n              grid.text(sprintf(\"%s\\n%s\", code, dataod2a[i, j]), x, y, gp = gpar(fontsize = 11, col = get_line_colour(code)))\r\n            } else {\r\n              grid.text(sprintf(\"%s\", code), x, y, gp = gpar(fontsize = 15, col = get_line_colour(code)))\r\n            }\r\n          }\r\n          if (j %in% c(2,3)) {\r\n            grid.rect(\r\n              x = x, y = y, width = width, height = height,\r\n              gp = gpar(fill = fill, col = NA)\r\n            )\r\n            if(dataod2[i, j] > 60000){\r\n              grid.text(sprintf(\"%.0f\", dataod2[i, j]), x, y, gp = gpar(fontsize = 15, col = \"white\"))\r\n            }\r\n            else if(dataod2[i, j] >= 0){\r\n              grid.text(sprintf(\"%.0f\", dataod2[i, j]), x, y, gp = gpar(fontsize = 15))\r\n            }\r\n          }\r\n        }\r\n      },\r\n      rect_gp = gpar(col = \"black\", lwd = 0.2))\r\n    }\r\n    list(img = img, img_dims = img_dims)\r\n  })\r\n  draw_heatmap <- function(heatmap, img_dims) {\r\n    # Retrieve dimensions\r\n    img_width  <- 1.5 * img_dims$width\r\n    img_height <- 1.5 * img_dims$height\r\n    \r\n    # Create a temporary PNG file\r\n    temp_file <- tempfile(fileext = \".png\")\r\n    while (dev.cur() > 1L) {\r\n      dev.off()\r\n    }\r\n    png(filename = temp_file, width = img_width, height = img_height, units = \"px\", res = 96)\r\n    grid::grid.newpage()\r\n    heatmap_type_names = list(\"by_bus_svc\" = \"'By bus service'\" , \"by_specific_stops\" = \"'By specific stops'\", \"by_mrt_line\" = \"By MRT/LRT line\", \"by_specific_stns\" = \"By specific stations\")\r\n    heatmap_type_name = heatmap_type_names[[heatmap_type()]]\r\n    # Draw the heatmap\r\n    if (\"by_bus_svc\" %in% heatmap_type() || \"by_mrt_line\" %in% heatmap_type()) {\r\n      req(result())\r\n      draw(result()$img)\r\n      result_msg(paste(\"<span style='color:#00DD00; font-weight:bold;'><i class='fas fa-square-check'><\/i> Heatmap of type\",heatmap_type_name,\"successfully drawn!<\/span>\"))\r\n    } else {\r\n      req(result())\r\n      draw(result()$img, heatmap_legend_side = \"top\")\r\n      result_msg(paste(\"<span style='color:#00DD00; font-weight:bold;'><i class='fas fa-square-check'><\/i> Heatmap of type\",heatmap_type_name,\"successfully drawn!<\/span>\"))\r\n    }\r\n    dev.off()\r\n    list(\r\n      src = temp_file,\r\n      contentType = \"image/png\",\r\n      width = img_width,\r\n      height = img_height,\r\n      alt = \"Demand Heatmap\"\r\n    )\r\n  }\r\n  output$result_out <- renderImage({\r\n    req(result())\r\n    draw_heatmap(result()$img, result()$img_dims)\r\n  }, deleteFile = FALSE)\r\n  discord_image <- eventReactive(result(), {\r\n    req(result())\r\n    discord_img <- draw_heatmap(result()$img, result()$img_dims)\r\n    session$sendCustomMessage(\"send_image\", discord_img)\r\n  })\r\n  observe(result())\r\n  output$upload_conf <- renderText({HTML(conf_msg())})\r\n  output$upload_conf2 <- renderText({HTML(conf_msg2())})\r\n  output$upload_conf3 <- renderText({HTML(conf_msg3())})\r\n  output$result_conf <- renderText({HTML(result_msg())})\r\n}\r\n\r\nshinyApp(ui, server)\r\nshinyApp(ui = ui, server = server)","type":"text"}]
